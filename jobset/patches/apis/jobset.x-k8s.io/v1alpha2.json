{
  "components": {
    "schemas": {
      "jobset.x-k8s.io/v1alpha2.JobSet": {
        "properties":{
          "spec": {
            "properties": {
              "replicatedJobs": {
                "items": {
                  "properties": {
                    "template": {
                      "properties": null,
                      "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobTemplateSpec"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "io.k8s.api.batch.v1.CronJob": {
        "description": "CronJob represents the configuration of a single cron job.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
              }
            ],
            "default": {},
            "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobSpec"
              }
            ],
            "default": {},
            "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobStatus"
              }
            ],
            "default": {},
            "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "batch",
            "kind": "CronJob",
            "version": "v1"
          }
        ]
      },
      "io.k8s.api.batch.v1.CronJobList": {
        "description": "CronJobList is a collection of cron jobs.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "items": {
            "description": "items is the list of CronJobs.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              ],
              "default": {}
            },
            "type": "array"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
              }
            ],
            "default": {},
            "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "batch",
            "kind": "CronJobList",
            "version": "v1"
          }
        ]
      },
      "io.k8s.api.batch.v1.CronJobSpec": {
        "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
        "properties": {
          "concurrencyPolicy": {
            "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
            "type": "string"
          },
          "failedJobsHistoryLimit": {
            "description": "The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.",
            "format": "int32",
            "type": "integer"
          },
          "jobTemplate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobTemplateSpec"
              }
            ],
            "default": {},
            "description": "Specifies the job that will be created when executing a CronJob."
          },
          "schedule": {
            "default": "",
            "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
            "type": "string"
          },
          "startingDeadlineSeconds": {
            "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
            "format": "int64",
            "type": "integer"
          },
          "successfulJobsHistoryLimit": {
            "description": "The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.",
            "format": "int32",
            "type": "integer"
          },
          "suspend": {
            "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
            "type": "boolean"
          },
          "timeZone": {
            "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones",
            "type": "string"
          }
        },
        "required": [
          "schedule",
          "jobTemplate"
        ],
        "type": "object"
      },
      "io.k8s.api.batch.v1.CronJobStatus": {
        "description": "CronJobStatus represents the current state of a cron job.",
        "properties": {
          "active": {
            "description": "A list of pointers to currently running jobs.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "lastScheduleTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Information when was the last time the job was successfully scheduled."
          },
          "lastSuccessfulTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Information when was the last time the job successfully completed."
          }
        },
        "type": "object"
      },
      "io.k8s.api.batch.v1.Job": {
        "description": "Job represents the configuration of a single job.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
              }
            ],
            "default": {},
            "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobSpec"
              }
            ],
            "default": {},
            "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobStatus"
              }
            ],
            "default": {},
            "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "batch",
            "kind": "Job",
            "version": "v1"
          }
        ]
      },
      "io.k8s.api.batch.v1.JobCondition": {
        "description": "JobCondition describes current state of a job.",
        "properties": {
          "lastProbeTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Last time the condition was checked."
          },
          "lastTransitionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Last time the condition transit from one status to another."
          },
          "message": {
            "description": "Human readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "(brief) reason for the condition's last transition.",
            "type": "string"
          },
          "status": {
            "default": "",
            "description": "Status of the condition, one of True, False, Unknown.",
            "type": "string"
          },
          "type": {
            "default": "",
            "description": "Type of job condition, Complete or Failed.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": "object"
      },
      "io.k8s.api.batch.v1.JobList": {
        "description": "JobList is a collection of jobs.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "items": {
            "description": "items is the list of Jobs.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              ],
              "default": {}
            },
            "type": "array"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
              }
            ],
            "default": {},
            "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          }
        },
        "required": [
          "items"
        ],
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "batch",
            "kind": "JobList",
            "version": "v1"
          }
        ]
      },
      "io.k8s.api.batch.v1.JobSpec": {
        "description": "JobSpec describes how the job execution will look like.",
        "properties": {
          "activeDeadlineSeconds": {
            "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "backoffLimit": {
            "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "backoffLimitPerIndex": {
            "description": "Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "completionMode": {
            "description": "completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n`NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n`Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\nMore completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.",
            "type": "string"
          },
          "completions": {
            "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "managedBy": {
            "description": "ManagedBy field indicates the controller that manages a Job. The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field. The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first \"/\" must be a valid subdomain as defined by RFC 1123. All characters trailing the first \"/\" must be valid HTTP Path characters as defined by RFC 3986. The value cannot exceed 64 characters.\n\nThis field is alpha-level. The job controller accepts setting the field when the feature gate JobManagedBy is enabled (disabled by default).",
            "maxLength": 63,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a domain-prefixed path (such as \"acme.io/foo\")",
                "rule": "self.indexOf(\"/\") > 0 && self.indexOf(\"/\") == self.lastIndexOf(\"/\")"
              },
              {
                "messageExpression": "format.dns1123Subdomain().validate(self.substring(0, self.indexOf(\"/\"))).value()",
                "rule": "!self.contains(\"/\") || !format.dns1123Subdomain().validate(self.substring(0, self.indexOf(\"/\"))).hasValue()"
              },
              {
                "messageExpression": "Invalid path (regex used for validation is '[A-Za-z0-9/\\-._~%!$&'()*+,;=:]+')",
                "rule": "!self.contains(\"/\") || self.substring(self.indexOf(\"/\") + 1, self.size()).matches(\"[A-Za-z0-9/\\\\-._~%!$&'()*+,;=:]+\")"
              }
            ]
          },
          "manualSelector": {
            "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
            "type": "boolean"
          },
          "maxFailedIndexes": {
            "description": "Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "parallelism": {
            "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "podFailurePolicy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicy"
              }
            ],
            "description": "Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.\n\nThis field is beta-level. It can be used when the `JobPodFailurePolicy` feature gate is enabled (enabled by default)."
          },
          "podReplacementPolicy": {
            "description": "podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods\n  when they are terminating (has a metadata.deletionTimestamp) or failed.\n- Failed means to wait until a previously created Pod is fully terminated (has phase\n  Failed or Succeeded) before creating a replacement Pod.\n\nWhen using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.",
            "type": "string"
          },
          "selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
          },
          "successPolicy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.SuccessPolicy"
              }
            ],
            "description": "successPolicy specifies the policy when the Job can be declared as succeeded. If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions. When the field is specified, it must be immutable and works only for the Indexed Jobs. Once the Job meets the SuccessPolicy, the lingering pods are terminated.\n\nThis field  is alpha-level. To use this field, you must enable the `JobSuccessPolicy` feature gate (disabled by default)."
          },
          "suspend": {
            "description": "suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.",
            "type": "boolean"
          },
          "template": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec"
              }
            ],
            "default": {},
            "description": "Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are \"Never\" or \"OnFailure\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/"
          },
          "ttlSecondsAfterFinished": {
            "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "template"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".backoffLimitPerIndex",
            "message": "when maxFailedIndexes is specified",
            "reason": "FieldValueRequired",
            "rule": "!has(self.maxFailedIndexes) || has(self.backoffLimitPerIndex)"
          },
          {
            "fieldPath": ".completions",
            "message": "when completion mode is Indexed",
            "reason": "FieldValueRequired",
            "rule": "!has(self.completionMode) || self.completionMode != \"Indexed\" || has(self.completions)"
          },
          {
            "fieldPath": ".parallelism",
            "message": "must be less than or equal to 100000 when completion mode is Indexed",
            "rule": "!has(self.completionMode) || !has(self.parallelism) || self.completionMode != \"Indexed\" || self.parallelism <= 100000"
          },
          {
            "fieldPath": ".maxFailedIndexes",
            "message": "must be less than or equal to completions",
            "rule": "!has(self.completions) || !has(self.completionMode) || !has(self.maxFailedIndexes) || self.completionMode != \"Indexed\" || self.maxFailedIndexes <= self.completions"
          },
          {
            "fieldPath": ".maxFailedIndexes",
            "message": "must be less than or equal to 100000",
            "rule": "!has(self.maxFailedIndexes) || !has(self.completionMode) || self.completionMode != \"Indexed\" || self.maxFailedIndexes <= 100000"
          },
          {
            "fieldPath": ".maxFailedIndexes",
            "message": "must be specified when completions is above 100000 and backoffLimitPerIndex is set",
            "reason": "FieldValueRequired",
            "rule": "has(self.completions) && self.completions > 100000 && has(self.backoffLimitPerIndex) ? has(self.maxFailedIndexes) : true"
          },
          {
            "fieldPath": ".parallelism",
            "message": "must be less than or equal to 10000 when completions are above 100000 and used with backoff limit per index",
            "rule": "has(self.completions) && self.completions > 100000 && has(self.backoffLimitPerIndex) && has(self.parallelism) ? self.parallelism <= 10000 : true"
          },
          {
            "fieldPath": ".maxFailedIndexes",
            "message": "must be less than or equal to 10000 when completions are above 100000 and used with backoff limit per index",
            "rule": "has(self.completions) && self.completions > 100000 && has(self.backoffLimitPerIndex) && has(self.maxFailedIndexes) ? self.maxFailedIndexes <= 10000 : true"
          },
          {
            "fieldPath": ".backoffLimitPerIndex",
            "message": "requires indexed completion mode",
            "rule": "self.?completionMode.orValue(\"NonIndexed\") != \"Indexed\" ? !has(self.backoffLimitPerIndex) : true"
          },
          {
            "fieldPath": ".maxFailedIndexes",
            "message": "requires indexed completion mode",
            "rule": "self.?completionMode.orValue(\"NonIndexed\") != \"Indexed\" ? !has(self.maxFailedIndexes) : true"
          },
          {
            "fieldPath": ".podFailurePolicy.rules",
            "message": "FailIndex rule action requires the backoffLimitPerIndex to be set",
            "rule": "self.?podFailurePolicy.?rules.orValue([]).all(r, r.action != \"FailIndex\" || has(self.backoffLimitPerIndex))"
          },
          {
            "fieldPath": ".successPolicy",
            "message": "requires indexed completion mode",
            "rule": "!has(self.successPolicy) || self.?completionMode.orValue(\"NonIndexed\") == \"Indexed\""
          },
          {
            "fieldPath": ".podReplacementPolicy",
            "message": "must be \"Failed\" when podFailurePolicy is used",
            "rule": "!has(self.podReplacementPolicy) || !has(self.podFailurePolicy) || self.podReplacementPolicy == \"Failed\""
          },
          {
            "fieldPath": ".template.spec.restartPolicy",
            "message": "only \"Never\" is supported when podFailurePolicy is specified",
            "rule": "!has(self.podFailurePolicy) || self.?template.?spec.?restartPolicy.orValue(\"\") == \"Never\""
          },
          {
            "fieldPath": ".podFailurePolicy.rules",
            "message": "must be one of the container or initContainer names in the pod template\"",
            "rule": "self.?podFailurePolicy.?rules.orValue([]).all(r, !has(r.onExitCodes) || !has(r.onExitCodes.containerName) || self.?template.?spec.?containers.orValue([]).exists(c, c.name == r.onExitCodes.containerName) || self.?template.?spec.?initContainers.orValue([]).exists(c, c.name == r.onExitCodes.containerName))"
          },
          {
            "fieldPath": ".successPolicy.rules",
            "message": "successPolicy.rules.succeededCount must be less than or equal to spec.completions",
            "rule": "!has(self.successPolicy) || self.successPolicy.?rules.orValue([]).all(r, !has(r.succeededCount) || r.succeededCount <= self.?completions.orValue(0))"
          }
        ]
      },
      "io.k8s.api.batch.v1.JobStatus": {
        "description": "JobStatus represents the current state of a Job.",
        "properties": {
          "active": {
            "description": "The number of pending and running pods which are not terminating (without a deletionTimestamp). The value is zero for finished jobs.",
            "format": "int32",
            "type": "integer"
          },
          "completedIndexes": {
            "description": "completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\".",
            "type": "string"
          },
          "completionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is set when the job finishes successfully, and only then. The value cannot be updated or removed. The value indicates the same or later point in time as the startTime field."
          },
          "conditions": {
            "description": "The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true.\n\nA job is considered finished when it is in a terminal condition, either \"Complete\" or \"Failed\". A Job cannot have both the \"Complete\" and \"Failed\" conditions. Additionally, it cannot be in the \"Complete\" and \"FailureTarget\" conditions. The \"Complete\", \"Failed\" and \"FailureTarget\" conditions cannot be disabled.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobCondition"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-patch-merge-key": "type",
            "x-kubernetes-patch-strategy": "merge"
          },
          "failed": {
            "description": "The number of pods which reached phase Failed. The value increases monotonically.",
            "format": "int32",
            "type": "integer"
          },
          "failedIndexes": {
            "description": "FailedIndexes holds the failed indexes when spec.backoffLimitPerIndex is set. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". The set of failed indexes cannot overlap with the set of completed indexes.\n\nThis field is beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).",
            "type": "string"
          },
          "ready": {
            "description": "The number of pods which have a Ready condition.",
            "format": "int32",
            "type": "integer"
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.\n\nOnce set, the field can only be removed when the job is suspended. The field cannot be modified while the job is unsuspended or finished."
          },
          "succeeded": {
            "description": "The number of pods which reached phase Succeeded. The value increases monotonically for a given spec. However, it may decrease in reaction to scale down of elastic indexed jobs.",
            "format": "int32",
            "type": "integer"
          },
          "terminating": {
            "description": "The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\nThis field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).",
            "format": "int32",
            "type": "integer"
          },
          "uncountedTerminatedPods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.UncountedTerminatedPods"
              }
            ],
            "description": "uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nOld jobs might not be tracked using this field, in which case the field remains null. The structure is empty for finished jobs."
          }
        },
        "type": "object"
      },
      "io.k8s.api.batch.v1.JobTemplateSpec": {
        "description": "JobTemplateSpec describes the data a Job should have when created from a template",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
              }
            ],
            "default": {},
            "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobSpec"
              }
            ],
            "default": {},
            "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object"
      },
      "io.k8s.api.batch.v1.PodFailurePolicy": {
        "description": "PodFailurePolicy describes how failed pods influence the backoffLimit.",
        "properties": {
          "rules": {
            "description": "A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyRule"
                }
              ],
              "default": {}
            },
            "maxItems": 20,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "rules"
        ],
        "type": "object"
      },
      "io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement": {
        "description": "PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.",
        "properties": {
          "containerName": {
            "description": "Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.",
            "type": "string"
          },
          "operator": {
            "default": "",
            "description": "Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n- In: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is in the set of specified values.\n- NotIn: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is not in the set of specified values.\nAdditional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.",
            "type": "string"
          },
          "values": {
            "description": "Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.",
            "items": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "maxItems": 255,
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "set",
            "x-kubernetes-validations": [
              {
                "message": "must be ordered",
                "rule": "self.isSorted()"
              }
            ]
          }
        },
        "required": [
          "operator",
          "values"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".values",
            "message": "values must not be 0 for the In operator",
            "rule": "self.?operator.orValue(\"\") != \"In\" || !self.?values.orValue([]).exists(v, v == 0)"
          }
        ]
      },
      "io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern": {
        "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.",
        "properties": {
          "status": {
            "default": "",
            "description": "Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.",
            "type": "string"
          },
          "type": {
            "default": "",
            "description": "Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": "object"
      },
      "io.k8s.api.batch.v1.PodFailurePolicyRule": {
        "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.",
        "properties": {
          "action": {
            "default": "",
            "description": "Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n- FailJob: indicates that the pod's job is marked as Failed and all\n  running pods are terminated.\n- FailIndex: indicates that the pod's index is marked as Failed and will\n  not be restarted.\n  This value is beta-level. It can be used when the\n  `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).\n- Ignore: indicates that the counter towards the .backoffLimit is not\n  incremented and a replacement pod is created.\n- Count: indicates that the pod is handled in the default way - the\n  counter towards the .backoffLimit is incremented.\nAdditional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.",
            "type": "string"
          },
          "onExitCodes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement"
              }
            ],
            "description": "Represents the requirement on the container exit codes."
          },
          "onPodConditions": {
            "description": "Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern"
                }
              ],
              "default": {}
            },
            "maxItems": 20,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "action"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "specifying both OnExitCodes and OnPodConditions is not supported",
            "rule": "!has(self.onExitCodes) || !has(self.onPodConditions)"
          },
          {
            "message": "specifying one of OnExitCodes and OnPodConditions is required",
            "rule": "has(self.onExitCodes) || has(self.onPodConditions)"
          }
        ]
      },
      "io.k8s.api.batch.v1.SuccessPolicy": {
        "description": "SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.",
        "properties": {
          "rules": {
            "description": "rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the \"SucceededCriteriaMet\" condition is added, and the lingering pods are removed. The terminal state for such a Job has the \"Complete\" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.SuccessPolicyRule"
                }
              ],
              "default": {}
            },
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "rules"
        ],
        "type": "object"
      },
      "io.k8s.api.batch.v1.SuccessPolicyRule": {
        "description": "SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the \"succeededIndexes\" or \"succeededCount\" specified.",
        "properties": {
          "succeededCount": {
            "description": "succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job. When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes. For example, given that succeededIndexes is \"1-4\", succeededCount is \"3\", and completed indexes are \"1\", \"3\", and \"5\", the Job isn't declared as succeeded because only \"1\" and \"3\" indexes are considered in that rules. When this field is null, this doesn't default to any value and is never evaluated at any time. When specified it needs to be a positive integer.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "succeededIndexes": {
            "description": "succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job. The list of indexes must be within 0 to \".spec.completions-1\" and must not contain duplicates. At least one element is required. The indexes are represented as intervals separated by commas. The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen. The number are listed in represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". When this field is null, this field doesn't default to any value and is never evaluated at any time.",
            "maxLength": 65536,
            "pattern": "^$|(\\d+(-\\d+)?)(,\\d+(-\\d+)?)*$",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "non-increasing order, must be a list of intervals where the first number is less than the second",
                "rule": "!self.matches(\"^(\\\\d+(-\\\\d+)?)(,\\\\d+(-\\\\d+)?)*$\") || self.split(\",\").all(range, optional.of(range.split(\"-\")).optMap(spl, (spl.size() == 2 ? int(spl[0]) < int(spl[1]) : true)).value())"
              }
            ]
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "at least one of succeededCount or succeededIndexes must be specified",
            "reason": "FieldValueRequired",
            "rule": "has(self.succeededIndexes) || has(self.succeededCount)"
          }
        ]
      },
      "io.k8s.api.batch.v1.UncountedTerminatedPods": {
        "description": "UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.",
        "properties": {
          "failed": {
            "description": "failed holds UIDs of failed Pods.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "succeeded": {
            "description": "succeeded holds UIDs of succeeded Pods.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
        "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
            "type": "string"
          },
          "partition": {
            "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
            "format": "int32",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "readOnly": {
            "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
            "type": "boolean"
          },
          "volumeID": {
            "default": "",
            "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "volumeID"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Affinity": {
        "description": "Affinity is a group of affinity scheduling rules.",
        "properties": {
          "nodeAffinity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeAffinity"
              }
            ],
            "description": "Describes node affinity scheduling rules for the pod."
          },
          "podAffinity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinity"
              }
            ],
            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
          },
          "podAntiAffinity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAntiAffinity"
              }
            ],
            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.AppArmorProfile": {
        "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
        "properties": {
          "localhostProfile": {
            "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
            "maxLength": 4095,
            "type": "string"
          },
          "type": {
            "default": "",
            "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".localhostProfile",
            "message": "must be set when AppArmor type is Localhost",
            "reason": "FieldValueRequired",
            "rule": "self.type != \"Localhost\" || has(self.localhostProfile) && self.localhostProfile.trim().size() > 0"
          },
          {
            "fieldPath": ".localhostProfile",
            "message": "must not be padded with whitespace",
            "reason": "FieldValueInvalid",
            "rule": "self.type != \"Localhost\" || !has(self.localhostProfile) || self.localhostProfile.trim() == self.localhostProfile"
          },
          {
            "fieldPath": ".localhostProfile",
            "message": "can only be set when AppArmor type is Localhost",
            "rule": "self.type == \"Localhost\" || !has(self.localhostProfile)"
          }
        ]
      },
      "io.k8s.api.core.v1.AzureDiskVolumeSource": {
        "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
        "properties": {
          "cachingMode": {
            "default": "ReadWrite",
            "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
            "type": "string"
          },
          "diskName": {
            "default": "",
            "description": "diskName is the Name of the data disk in the blob storage",
            "minLength": 1,
            "type": "string"
          },
          "diskURI": {
            "default": "",
            "description": "diskURI is the URI of data disk in the blob storage",
            "minLength": 1,
            "type": "string"
          },
          "fsType": {
            "default": "ext4",
            "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "kind": {
            "default": "Shared",
            "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
            "type": "string"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          }
        },
        "required": [
          "diskName",
          "diskURI"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "supported values: /subscriptions/{sub-id}/resourcegroups/{group-name}/providers/microsoft.compute/disks/{disk-id}",
            "rule": "has(self.kind) && self.kind == \"Managed\" ? self.?diskURI.orValue(\"\").indexOf(\"/subscriptions/\") == 0 : true"
          },
          {
            "message": "supported values: https://{account-name}.blob.core.windows.net/{container-name}/{disk-name}.vhd",
            "rule": "has(self.kind) && self.kind != \"Managed\" ? self.?diskURI.orValue(\"\").indexOf(\"https://\") == 0 : true"
          }
        ]
      },
      "io.k8s.api.core.v1.AzureFileVolumeSource": {
        "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
        "properties": {
          "readOnly": {
            "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "secretName": {
            "default": "",
            "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
            "minLength": 1,
            "type": "string"
          },
          "shareName": {
            "default": "",
            "description": "shareName is the azure share Name",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "secretName",
          "shareName"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.CSIVolumeSource": {
        "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
        "properties": {
          "driver": {
            "default": "",
            "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
            "maxLength": 63,
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self.lowerAscii()).value()",
                "rule": "!format.dns1123Label().validate(self.lowerAscii()).hasValue()"
              }
            ]
          },
          "fsType": {
            "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
            "type": "string"
          },
          "nodePublishSecretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
            "x-kubernetes-validations": [
              {
                "fieldPath": ".name",
                "message": "Required value",
                "reason": "FieldValueRequired",
                "rule": "has(self.name) && self.name.size() > 0"
              },
              {
                "fieldPath": ".name",
                "messageExpression": "format.dns1123Subdomain().validate(self.name).value()",
                "rule": "self.?name.orValue(\"\").size() == 0 || !format.dns1123Subdomain().validate(self.name).hasValue()"
              }
            ]
          },
          "readOnly": {
            "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
            "type": "boolean"
          },
          "volumeAttributes": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
            "type": "object"
          }
        },
        "required": [
          "driver"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Capabilities": {
        "description": "Adds and removes POSIX capabilities from running containers.",
        "properties": {
          "add": {
            "description": "Added capabilities",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "drop": {
            "description": "Removed capabilities",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.CephFSVolumeSource": {
        "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "monitors": {
            "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
            "items": {
              "default": "",
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "path": {
            "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
            "type": "string"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
            "type": "boolean"
          },
          "secretFile": {
            "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
            "type": "string"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
          },
          "user": {
            "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
            "type": "string"
          }
        },
        "required": [
          "monitors"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.CinderVolumeSource": {
        "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.",
            "x-kubernetes-validations": [
              {
                "fieldPath": ".name",
                "message": "Required value",
                "rule": "has(self.name) && self.name.size() > 0"
              }
            ]
          },
          "volumeID": {
            "default": "",
            "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "volumeID"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ClaimSource": {
        "description": "ClaimSource describes a reference to a ResourceClaim.\n\nExactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.",
        "properties": {
          "resourceClaimName": {
            "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "resourceClaimTemplateName": {
            "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "\"must specify one of: `resourceClaimName`, `resourceClaimTemplateName`",
            "rule": "has(self.resourceClaimName) || has(self.resourceClaimTemplateName)"
          },
          {
            "message": "at most one of `resourceClaimName` or `resourceClaimTemplateName` may be specified",
            "rule": "!has(self.resourceClaimName) || !has(self.resourceClaimTemplateName)"
          }
        ]
      },
      "io.k8s.api.core.v1.ClusterTrustBundleProjection": {
        "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.",
        "properties": {
          "labelSelector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as \"match nothing\".  If set but empty, interpreted as \"match everything\"."
          },
          "name": {
            "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "self.contains(\":\") || !format.dns1123Subdomain().validate(self).hasValue()"
              },
              {
                "messageExpression": "format.dns1123Subdomain().validate(self.substring(self.lastIndexOf(\":\") + 1)).value()",
                "rule": "!self.contains(\":\") || !format.dns1123Subdomain().validate(self.substring(self.lastIndexOf(\":\") + 1)).hasValue()"
              }
            ]
          },
          "optional": {
            "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.",
            "type": "boolean"
          },
          "path": {
            "default": "",
            "description": "Relative path from the volume root to write the bundle.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not start with \"..\"",
                "rule": "self.startsWith(\"../\") || !self.startsWith(\"..\")"
              },
              {
                "message": "must not contain \"..\"",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              },
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              }
            ]
          },
          "signerName": {
            "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
            "maxLength": 571,
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a fully qualified domain and path of the form 'example.com/signer-name'",
                "rule": "self.size() == 0 || self.split(\"/\").size() == 2"
              },
              {
                "message": "domain part must have at most 253 bytes",
                "rule": "!self.contains(\"/\") || self.split(\"/\")[0].size() <= 253"
              },
              {
                "messageExpression": "self.split(\"/\")[0].split(\".\").map(lbl, format.dns1123Label().validate(lbl).orValue([])).filter(x, x.size() > 0)[0]",
                "rule": "!self.contains(\"/\") || self.split(\"/\")[0].split(\".\").all(lbl, !format.dns1123Label().validate(lbl).hasValue())"
              },
              {
                "message": "should be a domain with at least two segments separated by dots",
                "rule": "!self.contains(\"/\") || self.split(\"/\")[0].split(\".\").size() >= 2"
              },
              {
                "messageExpression": "self.split(\"/\")[1].split(\".\").map(lbl, format.dns1123Subdomain().validate(lbl).orValue([])).filter(x, x.size() > 0)[0]",
                "rule": "!self.contains(\"/\") || self.split(\"/\")[1].split(\".\").all(lbl, !format.dns1123Subdomain().validate(lbl).hasValue())"
              }
            ]
          }
        },
        "required": [
          "path"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "only one of name and signerName may be used",
            "rule": "!(has(self.name) && has(self.signerName))"
          },
          {
            "fieldPath": ".labelSelector",
            "message": "labelSelector must be unset if name is specified",
            "rule": "has(self.labelSelector) ? !has(self.name) || has(self.signerName) : true"
          },
          {
            "message": "either name or signerName must be specified",
            "rule": "has(self.name) || has(self.signerName)"
          }
        ]
      },
      "io.k8s.api.core.v1.ConfigMapEnvSource": {
        "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
        "properties": {
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "Specify whether the ConfigMap must be defined",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".name",
            "message": "Required value",
            "reason": "FieldValueRequired",
            "rule": "has(self.name) && self.name.size() > 0"
          },
          {
            "fieldPath": ".name",
            "messageExpression": "format.dns1123Subdomain().validate(self.name).value()",
            "rule": "!has(self.name) || !format.dns1123Subdomain().validate(self.name).hasValue()"
          }
        ]
      },
      "io.k8s.api.core.v1.ConfigMapKeySelector": {
        "allOf": [
          {
            "properties": {
              "name": {
                "x-kubernetes-validations": [
                  {
                    "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                    "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
                  }
                ]
              }
            }
          }
        ],
        "description": "Selects a key from a ConfigMap.",
        "properties": {
          "key": {
            "default": "",
            "description": "The key to select.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "^[-._a-zA-Z0-9]+$",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "may not start with '..'",
                "rule": "self == \"..\" || !self.startsWith(\"..\")"
              },
              {
                "message": "must not be '.'",
                "rule": "self != \".\""
              },
              {
                "message": "must not be '..'",
                "rule": "self != \"..\""
              }
            ]
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "Specify whether the ConfigMap or its key must be defined",
            "type": "boolean"
          }
        },
        "required": [
          "key"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.ConfigMapProjection": {
        "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
        "properties": {
          "items": {
            "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "optional specify whether the ConfigMap or its keys must be defined",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.ConfigMapVolumeSource": {
        "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
        "properties": {
          "defaultMode": {
            "default": 420,
            "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "items": {
            "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "optional specify whether the ConfigMap or its keys must be defined",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "Required value",
            "reason": "FieldValueRequired",
            "rule": "has(self.name) && self.name.size() > 0"
          }
        ]
      },
      "io.k8s.api.core.v1.Container": {
        "description": "A single application container that you want to run within a pod.",
        "properties": {
          "args": {
            "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "command": {
            "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "env": {
            "description": "List of environment variables to set in the container. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "envFrom": {
            "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvFromSource"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "image": {
            "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
            "minLength": 1,
            "type": "string"
          },
          "imagePullPolicy": {
            "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "lifecycle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Lifecycle"
              }
            ],
            "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "livenessProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "name": {
            "default": "",
            "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "reason": "FieldValueInvalid",
                "rule": "self.size() == 0 || !format.dns1123Label().validate(self).hasValue()"
              },
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "ports": {
            "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerPort"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "containerPort",
              "protocol"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "containerPort",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              },
              {
                "message": "container port names must be unique",
                "reason": "FieldValueDuplicate",
                "rule": "self.all(cp, cp.?name.orValue(\"\").size() == 0 || !self.exists(ocp, ocp.name == cp.name && !(ocp.?protocol == cp.?protocol && ocp.?containerPort == cp.?containerPort)))"
              }
            ]
          },
          "readinessProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              },
              {
                "fieldPath": ".terminationGracePeriodSeconds",
                "message": "must not be set for readinessProbes",
                "rule": "!has(self.terminationGracePeriodSeconds)"
              }
            ]
          },
          "resizePolicy": {
            "description": "Resources resize policy for the container.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerResizePolicy"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "resources": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
              }
            ],
            "default": {},
            "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "restartPolicy": {
            "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
            "type": "string"
          },
          "securityContext": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecurityContext"
              }
            ],
            "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
          },
          "startupProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "stdin": {
            "default": false,
            "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
            "type": "boolean"
          },
          "stdinOnce": {
            "default": false,
            "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
            "type": "boolean"
          },
          "terminationMessagePath": {
            "default": "/dev/termination-log",
            "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "terminationMessagePolicy": {
            "default": "File",
            "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "tty": {
            "default": false,
            "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
            "type": "boolean"
          },
          "volumeDevices": {
            "description": "volumeDevices is the list of block devices to be used by the container.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeDevice"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "devicePath"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "devicePath",
            "x-kubernetes-patch-strategy": "merge"
          },
          "volumeMounts": {
            "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeMount"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "mountPath"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "mountPath",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "workingDir": {
            "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          }
        },
        "required": [
          "name",
          "image"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".volumeMounts",
            "message": "volumeMounts must not already exist in volumeDevices",
            "rule": "self.?volumeDevices.orValue([]).size() == 0 || self.?volumeMounts.orValue([]).all(vm, !self.volumeDevices.exists(vd, vd.name == vm.name))"
          },
          {
            "fieldPath": ".volumeMounts",
            "message": "must not already exist as a path in volumeDevices",
            "rule": "self.?volumeDevices.orValue([]).size() == 0 || self.?volumeMounts.orValue([]).all(vm, !self.volumeDevices.exists(vd, vd.devicePath == vm.mountPath))"
          },
          {
            "fieldPath": ".volumeMounts",
            "message": "Bidirectional mount propagation is available only to privileged containers",
            "reason": "FieldValueForbidden",
            "rule": "self.?securityContext.?privileged.orValue(false) || self.?volumeMounts.orValue([]).all(vm, vm.?mountPropagation.orValue(\"\") != \"Bidirectional\")"
          }
        ]
      },
      "io.k8s.api.core.v1.ContainerPort": {
        "description": "ContainerPort represents a network port in a single container.",
        "properties": {
          "containerPort": {
            "default": 0,
            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
            "format": "int32",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "hostIP": {
            "description": "What host IP to bind the external port to.",
            "type": "string"
          },
          "hostPort": {
            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
            "format": "int32",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.portName().validate(self).value()",
                "rule": "!format.portName().validate(self).hasValue()"
              }
            ]
          },
          "protocol": {
            "default": "TCP",
            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
            "type": "string"
          }
        },
        "required": [
          "containerPort"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ContainerResizePolicy": {
        "description": "ContainerResizePolicy represents resource resize policy for the container.",
        "properties": {
          "resourceName": {
            "default": "",
            "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
            "type": "string"
          },
          "restartPolicy": {
            "default": "",
            "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
            "type": "string"
          }
        },
        "required": [
          "resourceName",
          "restartPolicy"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.DownwardAPIProjection": {
        "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
        "properties": {
          "items": {
            "description": "Items is a list of DownwardAPIVolume file",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
        "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
        "properties": {
          "fieldRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector"
              }
            ]
          },
          "mode": {
            "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "path": {
            "default": "",
            "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not start with '..'",
                "rule": "self.startsWith(\"../\") || !self.startsWith(\"..\")"
              },
              {
                "message": "must not contain '..'",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              },
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              }
            ]
          },
          "resourceFieldRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector"
              }
            ],
            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
            "x-kubernetes-validations": [
              {
                "fieldPath": ".containerName",
                "message": "Required value",
                "reason": "FieldValueRequired",
                "rule": "has(self.containerName) && self.containerName.size() > 0"
              },
              {
                "message": "supported values: [limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory, requests.ephemeral-storage]",
                "rule": "[\"limits.cpu\",\"limits.memory\",\"limits.ephemeral-storage\",\"requests.cpu\",\"requests.memory\",\"requests.ephemeral-storage\"].exists(x, x == self.resource) || [\"requests.hugepages-\", \"limits.hugepages-\"].exists(prefix, self.resource.startsWith(prefix))"
              }
            ]
          }
        },
        "required": [
          "path"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "fieldRef and resourceFieldRef can not be specified simultaneously",
            "rule": "!has(self.fieldRef) || !has(self.resourceFieldRef)"
          }
        ]
      },
      "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
        "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
        "properties": {
          "defaultMode": {
            "default": 420,
            "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "items": {
            "description": "Items is a list of downward API volume file",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                }
              ],
              "default": {}
            },
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.EmptyDirVolumeSource": {
        "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
        "properties": {
          "medium": {
            "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
            "type": "string"
          },
          "sizeLimit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
              }
            ],
            "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
            "x-kubernetes-validations": [
              {
                "message": "SizeLimit field must be a valid resource quantity",
                "rule": "isQuantity(self) && !quantity(self).isLessThan(quantity(0))"
              }
            ]
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.EnvFromSource": {
        "description": "EnvFromSource represents the source of a set of ConfigMaps",
        "properties": {
          "configMapRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapEnvSource"
              }
            ],
            "description": "The ConfigMap to select from"
          },
          "prefix": {
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
            "pattern": "^[-._a-zA-Z][-._a-zA-Z0-9]*$",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "may not start with '..'",
                "rule": "self == \"..\" || !self.startsWith(\"..\")"
              },
              {
                "message": "must not be '.'",
                "rule": "self != \".\""
              },
              {
                "message": "must not be '..'",
                "rule": "self != \"..\""
              }
            ]
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretEnvSource"
              }
            ],
            "description": "The Secret to select from"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "may not have more than one field specified at a time",
            "rule": "has(self.configMapRef) ? !has(self.secretRef) : true"
          },
          {
            "message": "must specify one of: `configMapRef` or `secretRef`",
            "rule": "has(self.configMapRef) || has(self.secretRef)"
          }
        ]
      },
      "io.k8s.api.core.v1.EnvVar": {
        "description": "EnvVar represents an environment variable present in a Container.",
        "properties": {
          "name": {
            "default": "",
            "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
            "minLength": 1,
            "pattern": "^[-._a-zA-Z][-._a-zA-Z0-9]*$",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "may not start with '..'",
                "rule": "self == \"..\" || !self.startsWith(\"..\")"
              },
              {
                "message": "must not be '.'",
                "rule": "self != \".\""
              },
              {
                "message": "must not be '..'",
                "rule": "self != \"..\""
              }
            ]
          },
          "value": {
            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
            "type": "string"
          },
          "valueFrom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVarSource"
              }
            ],
            "description": "Source for the environment variable's value. Cannot be used if value is not empty."
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".valueFrom",
            "message": "may not be specified when `value` is not empty",
            "rule": "has(self.value) ? !has(self.valueFrom) : true"
          }
        ]
      },
      "io.k8s.api.core.v1.EnvVarSource": {
        "description": "EnvVarSource represents a source for the value of an EnvVar.",
        "properties": {
          "configMapKeyRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapKeySelector"
              }
            ],
            "description": "Selects a key of a ConfigMap."
          },
          "fieldRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector"
              }
            ],
            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
            "x-kubernetes-validations": [
              {
                "fieldPath": ".fieldPath",
                "message": "error converting fieldPath: supported values: \"metadata.name\", \"metadata.namespace\", \"metadata.uid\", \"spec.nodeName\", \"spec.serviceAccountName\", \"status.hostIP\", \"status.hostIPs\", \"status.podIP\", \"status.podIPs\"",
                "rule": "self.?fieldPath.orValue(\"\").size() == 0 || self.fieldPath.contains('[') || [\"metadata.name\", \"metadata.namespace\", \"metadata.uid\", \"spec.nodeName\", \"spec.serviceAccountName\", \"status.hostIP\", \"status.hostIPs\", \"status.podIP\", \"status.podIPs\"].exists(x, x == self.fieldPath)"
              }
            ]
          },
          "resourceFieldRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector"
              }
            ],
            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
            "x-kubernetes-validations": [
              {
                "message": "supported values: metadata.name, metadata.namespace, metadata.uid, spec.nodeName, spec.serviceAccountName, status.hostIP, status.hostIPs, status.podIP, status.podIPs",
                "rule": "[\"metadata.name\",\"metadata.namespace\",\"metadata.uid\",\"spec.nodeName\",\"spec.serviceAccountName\",\"status.hostIP\",\"status.hostIPs\",\"status.podIP\",\"status.podIPs\"].exists(x, x == self.resource) || [\"requests.hugepages-\", \"limits.hugepages-\"].exists(prefix, self.resource.startsWith(prefix)"
              }
            ]
          },
          "secretKeyRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretKeySelector"
              }
            ],
            "description": "Selects a key of a secret in the pod's namespace"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "\"must specify one of: `fieldRef`, `resourceFieldRef`, `configMapKeyRef` or `secretKeyRef`",
            "rule": "has(self.fieldRef) || has(self.resourceFieldRef) || has(self.configMapKeyRef) || has(self.secretKeyRef)"
          },
          {
            "message": "may not have more than one field specified at a time",
            "rule": "[has(self.fieldRef), has(self.resourceFieldRef), has(self.configMapKeyRef), has(self.secretKeyRef)].filter(x, x).size() <= 1"
          }
        ]
      },
      "io.k8s.api.core.v1.EphemeralContainer": {
        "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.",
        "properties": {
          "args": {
            "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "command": {
            "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "env": {
            "description": "List of environment variables to set in the container. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvVar"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "envFrom": {
            "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.EnvFromSource"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "image": {
            "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not have leading or trailing whitespace",
                "rule": "self.trim() == self"
              }
            ]
          },
          "imagePullPolicy": {
            "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "lifecycle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Lifecycle"
              }
            ],
            "description": "Lifecycle is not allowed for ephemeral containers.",
            "x-kubernetes-validations": [
              {
                "message": "lifecycle is not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "livenessProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "Probes are not allowed for ephemeral containers.",
            "x-kubernetes-validations": [
              {
                "message": "probes are not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "name": {
            "default": "",
            "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "reason": "FieldValueInvalid",
                "rule": "self.size() == 0 || !format.dns1123Label().validate(self).hasValue()"
              }
            ]
          },
          "ports": {
            "description": "Ports are not allowed for ephemeral containers.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerPort"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "containerPort",
              "protocol"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "containerPort",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "field is not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "readinessProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "Probes are not allowed for ephemeral containers.",
            "x-kubernetes-validations": [
              {
                "message": "probes are not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "resizePolicy": {
            "description": "Resources resize policy for the container.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ContainerResizePolicy"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "field is not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "resources": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceRequirements"
              }
            ],
            "default": {},
            "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
            "x-kubernetes-validations": [
              {
                "message": "field is not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "!has(self.claims) && !has(self.requests) && !has(self.limits)"
              }
            ]
          },
          "restartPolicy": {
            "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "field is not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "securityContext": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecurityContext"
              }
            ],
            "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext."
          },
          "startupProbe": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Probe"
              }
            ],
            "description": "Probes are not allowed for ephemeral containers.",
            "x-kubernetes-validations": [
              {
                "message": "probes are not allowed for ephemeral containers",
                "reason": "FieldValueForbidden",
                "rule": "false"
              }
            ]
          },
          "stdin": {
            "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
            "type": "boolean"
          },
          "stdinOnce": {
            "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
            "type": "boolean"
          },
          "targetContainerName": {
            "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
            "type": "string"
          },
          "terminationMessagePath": {
            "default": "/dev/termination-log",
            "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "terminationMessagePolicy": {
            "default": "File",
            "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "tty": {
            "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
            "type": "boolean"
          },
          "volumeDevices": {
            "description": "volumeDevices is the list of block devices to be used by the container.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeDevice"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "devicePath"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "devicePath",
            "x-kubernetes-patch-strategy": "merge"
          },
          "volumeMounts": {
            "allOf": [
              {
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "subPath": {
                          "x-kubernetes-validations": [
                            {
                              "message": "cannot be set for an Ephemeral Container",
                              "reason": "FieldValueForbidden",
                              "rule": "false"
                            }
                          ]
                        },
                        "subPathExpr": {
                          "x-kubernetes-validations": [
                            {
                              "message": "cannot be set for an Ephemeral Container",
                              "reason": "FieldValueForbidden",
                              "rule": "false"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeMount"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "mountPath"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "mountPath",
            "x-kubernetes-patch-strategy": "merge",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          },
          "workingDir": {
            "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Field is immutable",
                "reason": "FieldValueForbidden",
                "rule": "self == oldSelf"
              }
            ]
          }
        },
        "required": [
          "name",
          "image"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.EphemeralVolumeSource": {
        "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
        "properties": {
          "volumeClaimTemplate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
              }
            ],
            "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
          }
        },
        "required": [
          "volumeClaimTemplate"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ExecAction": {
        "description": "ExecAction describes a \"run in container\" action.",
        "properties": {
          "command": {
            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
            "items": {
              "default": "",
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "command"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.FCVolumeSource": {
        "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "lun": {
            "description": "lun is Optional: FC target lun number",
            "format": "int32",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "readOnly": {
            "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "targetWWNs": {
            "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "wwids": {
            "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".targetWWNs",
            "message": "must specify either targetWWNs or wwids, but not both",
            "reason": "FieldValueRequired",
            "rule": "self.?targetWWNs.orValue([]).size() > 0 || self.?wwids.orValue([]).size() > 0"
          },
          {
            "fieldPath": ".targetWWNs",
            "message": "targetWWNs and wwids can not be specified simultaneously",
            "rule": "self.?targetWWNs.orValue([]).size() == 0 || self.?wwids.orValue([]).size() == 0"
          },
          {
            "fieldPath": ".lun",
            "message": "lun is required if targetWWNs is specified",
            "reason": "FieldValueRequired",
            "rule": "self.?targetWWNs.orValue([]).size() == 0 || has(self.lun)"
          }
        ]
      },
      "io.k8s.api.core.v1.FlexVolumeSource": {
        "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
        "properties": {
          "driver": {
            "default": "",
            "description": "driver is the name of the driver to use for this volume.",
            "minLength": 1,
            "type": "string"
          },
          "fsType": {
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
            "type": "string"
          },
          "options": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "description": "options is Optional: this field holds extra command options if any.",
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "kubernetes.io and k8s.io namespaces are reserved",
                "rule": "!self.exists(k, k.matches(\"[^/]*(kubernetes[.]io|k8s[.]io)([/].*)?$\"))"
              }
            ]
          },
          "readOnly": {
            "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
          }
        },
        "required": [
          "driver"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.FlockerVolumeSource": {
        "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "datasetName": {
            "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not contain '/'",
                "rule": "!self.contains(\"/\")"
              }
            ]
          },
          "datasetUUID": {
            "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "datasetName and datasetUUID can not be specified simultaneously",
            "rule": "has(self.datasetName) ? !has(self.datasetUUID) : true"
          },
          {
            "message": "one of datasetUUID and datasetName is required",
            "reason": "FieldValueRequired",
            "rule": "has(self.datasetUUID) || has(self.datasetName)"
          }
        ]
      },
      "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
        "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
        "properties": {
          "fsType": {
            "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
            "type": "string"
          },
          "partition": {
            "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
            "format": "int32",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "pdName": {
            "default": "",
            "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
            "minLength": 1,
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
            "type": "boolean"
          }
        },
        "required": [
          "pdName"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.GRPCAction": {
        "properties": {
          "port": {
            "default": 0,
            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
            "format": "int32",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "service": {
            "default": "",
            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
            "type": "string"
          }
        },
        "required": [
          "port"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.GitRepoVolumeSource": {
        "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
        "properties": {
          "directory": {
            "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not contain '..'",
                "rule": "self.split('/').all(e, e != \"..\")"
              },
              {
                "message": "must be a relative path",
                "rule": "!self.startsWith(\"/\")"
              }
            ]
          },
          "repository": {
            "default": "",
            "description": "repository is the URL",
            "minLength": 1,
            "type": "string"
          },
          "revision": {
            "description": "revision is the commit hash for the specified revision.",
            "type": "string"
          }
        },
        "required": [
          "repository"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.GlusterfsVolumeSource": {
        "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "endpoints": {
            "default": "",
            "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
            "minLength": 1,
            "type": "string"
          },
          "path": {
            "default": "",
            "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
            "minLength": 1,
            "type": "string"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
            "type": "boolean"
          }
        },
        "required": [
          "endpoints",
          "path"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.HTTPGetAction": {
        "description": "HTTPGetAction describes an action based on HTTP Get requests.",
        "properties": {
          "host": {
            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
            "type": "string"
          },
          "httpHeaders": {
            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPHeader"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "path": {
            "default": "/",
            "description": "Path to access on the HTTP server.",
            "minLength": 1,
            "type": "string"
          },
          "port": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
              }
            ],
            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
            "maximum": 65535,
            "minimum": 1,
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.portName().validate(self).value()",
                "rule": "type(self) != string || !format.portName().validate(self).hasValue()"
              }
            ]
          },
          "scheme": {
            "default": "HTTP",
            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "port"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.HTTPHeader": {
        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
        "properties": {
          "name": {
            "default": "",
            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
            "pattern": "^[-A-Za-z0-9]+$",
            "type": "string"
          },
          "value": {
            "default": "",
            "description": "The header field value",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.HostAlias": {
        "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
        "properties": {
          "hostnames": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                      "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "Hostnames for the above IP address.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "ip": {
            "description": "IP address of the host file entry.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a valid IP address, (e.g. 10.9.8.7 or 2001:db8::ffff)",
                "rule": "isIP(self)"
              }
            ]
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.HostPathVolumeSource": {
        "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "path": {
            "default": "",
            "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not contain '..'",
                "rule": "self.split('/').all(e, e != \"..\")"
              }
            ]
          },
          "type": {
            "default": "",
            "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ISCSIVolumeSource": {
        "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
        "properties": {
          "chapAuthDiscovery": {
            "default": false,
            "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
            "type": "boolean"
          },
          "chapAuthSession": {
            "default": false,
            "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
            "type": "boolean"
          },
          "fsType": {
            "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
            "type": "string"
          },
          "initiatorName": {
            "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be valid format starting with iqn, eui, or naa",
                "rule": "self.startsWith(\"iqn\") || self.startsWith(\"eui\") || self.startsWith(\"naa\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"iqn\") || self.matches(\"iqn\\\\.\\\\d{4}-\\\\d{2}\\\\.([[:alnum:]-.]+)(:[^,;*&$|\\\\s]+)$\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"eui\") || self.matches(\"^eui.[[:alnum:]]{16}$\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"naa\") || self.matches(\"^naa.[[:alnum:]]{32}$\")"
              }
            ]
          },
          "iqn": {
            "default": "",
            "description": "iqn is the target iSCSI Qualified Name.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be valid format starting with iqn, eui, or naa",
                "rule": "self.size() == 0 || self.startsWith(\"iqn\") || self.startsWith(\"eui\") || self.startsWith(\"naa\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"iqn\") || self.matches(\"iqn\\\\.\\\\d{4}-\\\\d{2}\\\\.([[:alnum:]-.]+)(:[^,;*&$|\\\\s]+)$\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"eui\") || self.matches(\"^eui.[[:alnum:]]{16}$\")"
              },
              {
                "message": "must be a valid format",
                "rule": "!self.startsWith(\"naa\") || self.matches(\"^naa.[[:alnum:]]{32}$\")"
              }
            ]
          },
          "iscsiInterface": {
            "default": "default",
            "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
            "type": "string"
          },
          "lun": {
            "default": 0,
            "description": "lun represents iSCSI Target Lun number.",
            "format": "int32",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "portals": {
            "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
          },
          "targetPortal": {
            "default": "",
            "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "targetPortal",
          "iqn",
          "lun"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".secretRef",
            "message": "Required value",
            "reason": "FieldValueRequired",
            "rule": "(self.?chapAuthDiscovery.orValue(false) || self.?chapAuthSession.orValue(false)) ? has(self.secretRef) : true"
          }
        ]
      },
      "io.k8s.api.core.v1.KeyToPath": {
        "description": "Maps a string key to a path within a volume.",
        "properties": {
          "key": {
            "default": "",
            "description": "key is the key to project.",
            "minLength": 1,
            "type": "string"
          },
          "mode": {
            "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "path": {
            "default": "",
            "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not start with \"..\"",
                "rule": "self.startsWith(\"../\") || !self.startsWith(\"..\")"
              },
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              },
              {
                "message": "must not contain \"..\"",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              }
            ]
          }
        },
        "required": [
          "key",
          "path"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Lifecycle": {
        "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
        "properties": {
          "postStart": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LifecycleHandler"
              }
            ],
            "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
          },
          "preStop": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LifecycleHandler"
              }
            ],
            "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.LifecycleHandler": {
        "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
        "properties": {
          "exec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ExecAction"
              }
            ],
            "description": "Exec specifies the action to take."
          },
          "httpGet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPGetAction"
              }
            ],
            "description": "HTTPGet specifies the http request to perform."
          },
          "sleep": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SleepAction"
              }
            ],
            "description": "Sleep represents the duration that the container should sleep before being terminated."
          },
          "tcpSocket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TCPSocketAction"
              }
            ],
            "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified."
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "must specify a handler type",
            "reason": "FieldValueRequired",
            "rule": "has(self.exec) || has(self.httpGet) || has(self.sleep) || has(self.tcpSocket)"
          },
          {
            "message": "may not specify more than 1 handler type",
            "rule": "(has(self.exec)?1:0) + (has(self.httpGet)?1:0) + (has(self.sleep)?1:0) + (has(self.tcpSocket)?1:0) <= 1"
          }
        ]
      },
      "io.k8s.api.core.v1.LocalObjectReference": {
        "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
        "properties": {
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.NFSVolumeSource": {
        "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "path": {
            "default": "",
            "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
            "minLength": 1,
            "pattern": "^/",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
            "type": "boolean"
          },
          "server": {
            "default": "",
            "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "server",
          "path"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.NodeAffinity": {
        "description": "Node affinity is a group of node affinity scheduling rules.",
        "properties": {
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PreferredSchedulingTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelector"
              }
            ],
            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.NodeSelector": {
        "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
        "properties": {
          "nodeSelectorTerms": {
            "description": "Required. A list of node selector terms. The terms are ORed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "must have at least one node selector term",
                "reason": "FieldValueRequired",
                "rule": "self.size() > 0"
              }
            ]
          }
        },
        "required": [
          "nodeSelectorTerms"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.NodeSelectorRequirement": {
        "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
        "properties": {
          "key": {
            "default": "",
            "description": "The label key that the selector applies to.",
            "type": "string"
          },
          "operator": {
            "default": "",
            "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
            "type": "string"
          },
          "values": {
            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "key",
          "operator"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.NodeSelectorTerm": {
        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
        "properties": {
          "matchExpressions": {
            "allOf": [
              {
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "key": {
                          "x-kubernetes-validations": [
                            {
                              "messageExpression": "format.named(\"qualifiedName\").value().validate(self).value()",
                              "rule": "!format.named(\"qualifiedName\").value().validate(self).hasValue()"
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "x-kubernetes-validations": [
                    {
                      "fieldPath": ".values",
                      "message": "must be specified when `operator` is 'In' or 'NotIn'",
                      "reason": "FieldValueRequired",
                      "rule": "self.operator == 'In' || self.operator == 'NotIn' ? has(self.values) && self.values.size() > 0 : true"
                    },
                    {
                      "fieldPath": ".values",
                      "message": "may not be specified when `operator` is 'Exists' or 'DoesNotExist'",
                      "reason": "FieldValueForbidden",
                      "rule": "self.operator == 'Exists' || self.operator == 'DoesNotExist' ? !has(self.values) || self.values.size() == 0 : true"
                    },
                    {
                      "fieldPath": ".values",
                      "message": "must be specified single value when `operator` is 'Lt' or 'Gt'",
                      "reason": "FieldValueRequired",
                      "rule": "self.operator == 'Gt' || self.operator == 'Lt' ? has(self.values) && self.values.size() == 1 : true"
                    }
                  ]
                }
              }
            ],
            "description": "A list of node selector requirements by node's labels.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "matchFields": {
            "allOf": [
              {
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "key": {
                          "x-kubernetes-validations": [
                            {
                              "message": "not a valid field selector key",
                              "reason": "FieldValueInvalid",
                              "rule": "[\"metadata.name\"].exists(n, n == self)"
                            }
                          ]
                        },
                        "operator": {
                          "x-kubernetes-validations": [
                            {
                              "message": "not a valid selector operator",
                              "reason": "FieldValueInvalid",
                              "rule": "self == 'In' || self == 'NotIn'"
                            }
                          ]
                        },
                        "values": {
                          "allOf": [
                            {
                              "items": {
                                "x-kubernetes-validations": [
                                  {
                                    "messageExpression": "format.named(\"dns1123Subdomain\").value().validate(self).value()",
                                    "rule": "!format.named(\"dns1123Subdomain\").value().validate(self).hasValue()"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "x-kubernetes-validations": [
                    {
                      "fieldPath": ".values",
                      "message": "must be only one value when `operator` is 'In' or 'NotIn' for node field selector",
                      "reason": "FieldValueRequired",
                      "rule": "self.operator == 'In' || self.operator == 'NotIn' ? has(self.values) && self.values.size() == 1 : true"
                    }
                  ]
                }
              }
            ],
            "description": "A list of node selector requirements by node's fields. !TODO: Use variables for name format to use here, fortunately only one is valid so we use that",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.ObjectFieldSelector": {
        "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
        "properties": {
          "apiVersion": {
            "default": "v1",
            "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
            "minLength": 1,
            "type": "string"
          },
          "fieldPath": {
            "default": "",
            "description": "Path of the field to select in the specified API version.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "error converting fieldPath: field label does not support subscript",
                "rule": "!self.contains(\"[\") || !self.contains(\"]\") || [\"metadata.annotations\", \"metadata.labels\"].exists(x, self.startsWith(x + \"['\") && self.endsWith(\"']\"))"
              },
              {
                "messageExpression": "format.qualifiedName().validate(self.substring(22, self.size() - 2).lowerAscii()).value()",
                "rule": "!self.startsWith(\"metadata.annotations['\") || !self.endsWith(\"']\") || !format.qualifiedName().validate(self.substring(22, self.size() - 2).lowerAscii()).hasValue()"
              },
              {
                "messageExpression": "format.qualifiedName().validate(self.substring(17, self.size() - 2)).value()",
                "rule": "!self.startsWith(\"metadata.labels['\") || !self.endsWith(\"']\") ||!format.qualifiedName().validate(self.substring(17, self.size() - 2)).hasValue()"
              }
            ]
          }
        },
        "required": [
          "apiVersion",
          "fieldPath"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.ObjectReference": {
        "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
        "properties": {
          "apiVersion": {
            "description": "API version of the referent.",
            "type": "string"
          },
          "fieldPath": {
            "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
            "type": "string"
          },
          "kind": {
            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
            "type": "string"
          },
          "resourceVersion": {
            "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "uid": {
            "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
        "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
        "properties": {
          "accessModes": {
            "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "dataSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference"
              }
            ],
            "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource."
          },
          "dataSourceRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TypedObjectReference"
              }
            ],
            "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled."
          },
          "resources": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeResourceRequirements"
              }
            ],
            "default": {},
            "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
          },
          "selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "selector is a label query over volumes to consider for binding."
          },
          "storageClassName": {
            "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
            "type": "string"
          },
          "volumeAttributesClassName": {
            "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
            "type": "string"
          },
          "volumeMode": {
            "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
            "type": "string"
          },
          "volumeName": {
            "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
        "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource. ?k8s:validation:cel[0]:rule>!self.metadata.exists(k, k != \"labels\" && k != \"annotations\") ?k8s:validation:cel[0]:message>pvc template metadata may only contain labels and annotations",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
              }
            ],
            "default": {},
            "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
              }
            ],
            "default": {},
            "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
        "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
        "properties": {
          "claimName": {
            "default": "",
            "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
            "minLength": 1,
            "type": "string"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
            "type": "boolean"
          }
        },
        "required": [
          "claimName"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
        "description": "Represents a Photon Controller persistent disk resource.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "pdID": {
            "default": "",
            "description": "pdID is the ID that identifies Photon Controller persistent disk",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "pdID"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodAffinity": {
        "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
        "properties": {
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PodAffinityTerm": {
        "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
        "properties": {
          "labelSelector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods."
          },
          "matchLabelKeys": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.qualifiedName().validate(self).value()",
                      "rule": "!format.qualifiedName().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "mismatchLabelKeys": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.qualifiedName().validate(self).value()",
                      "rule": "!format.qualifiedName().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "namespaceSelector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces."
          },
          "namespaces": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.dns1123Label().validate(self).value()",
                      "rule": "!format.dns1123Label().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "topologyKey": {
            "default": "",
            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          }
        },
        "required": [
          "topologyKey"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "matchLabelKeys key must not be in mismatchLabelKeys",
            "rule": "!has(self.mismatchLabelKeys) || !has(self.matchLabelKeys) || self.matchLabelKeys.all(x, !self.mismatchLabelKeys.exists(y, y == x))"
          }
        ]
      },
      "io.k8s.api.core.v1.PodAntiAffinity": {
        "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
        "properties": {
          "preferredDuringSchedulingIgnoredDuringExecution": {
            "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "requiredDuringSchedulingIgnoredDuringExecution": {
            "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PodDNSConfig": {
        "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
        "properties": {
          "nameservers": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "message": "must be a valid IP address, (e.g. 10.9.8.7 or 2001:db8::ffff)",
                      "rule": "isIP(self)"
                    }
                  ]
                }
              }
            ],
            "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
            "items": {
              "default": "",
              "type": "string"
            },
            "maxItems": 3,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "options": {
            "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodDNSConfigOption"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "searches": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.dns1123Subdomain().validate(self.substring(0, self.size() - (self.endsWith(\".\") ? 1 : 0))).value()",
                      "rule": "!format.dns1123Subdomain().validate(self.substring(0, self.size() - (self.endsWith(\".\") ? 1 : 0))).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
            "items": {
              "default": "",
              "type": "string"
            },
            "maxItems": 32,
            "type": "array",
            "x-kubernetes-list-type": "atomic",
            "x-kubernetes-validations": [
              {
                "message": "must not have more than 2048 characters (including spaces) in the search list",
                "rule": "self.map(x, x.size()).sum() + self.size() - 1 <= 2048"
              }
            ]
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PodDNSConfigOption": {
        "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
        "properties": {
          "name": {
            "description": "Required.",
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodOS": {
        "description": "PodOS defines the OS parameters of a pod.",
        "properties": {
          "name": {
            "default": "",
            "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodReadinessGate": {
        "description": "PodReadinessGate contains the reference to a pod condition",
        "properties": {
          "conditionType": {
            "default": "",
            "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          }
        },
        "required": [
          "conditionType"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodResourceClaim": {
        "description": "PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.",
        "properties": {
          "name": {
            "default": "",
            "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.",
            "maxLength": 63,
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "!format.dns1123Label().validate(self).hasValue()"
              }
            ]
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ClaimSource"
              }
            ],
            "default": {},
            "description": "Source describes where to find the ResourceClaim."
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodSchedulingGate": {
        "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
        "properties": {
          "name": {
            "default": "",
            "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PodSecurityContext": {
        "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
        "properties": {
          "appArmorProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AppArmorProfile"
              }
            ],
            "description": "appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
          },
          "fsGroup": {
            "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "fsGroupChangePolicy": {
            "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
            "type": "string"
          },
          "runAsGroup": {
            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "runAsNonRoot": {
            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
            "type": "boolean"
          },
          "runAsUser": {
            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "seLinuxOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SELinuxOptions"
              }
            ],
            "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
          },
          "seccompProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SeccompProfile"
              }
            ],
            "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
          },
          "supplementalGroups": {
            "allOf": [
              {
                "items": {
                  "maximum": 2147483647,
                  "minimum": 0
                }
              }
            ],
            "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
            "items": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "sysctls": {
            "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.Sysctl"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "windowsOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions"
              }
            ],
            "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PodSpec": {
        "description": "PodSpec is a description of a pod.",
        "properties": {
          "activeDeadlineSeconds": {
            "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer"
          },
          "affinity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Affinity"
              }
            ],
            "description": "If specified, the pod's scheduling constraints"
          },
          "automountServiceAccountToken": {
            "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
            "type": "boolean"
          },
          "containers": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "fieldPath": ".restartPolicy",
                      "message": "may not be set for non-init containers",
                      "reason": "FieldValueForbidden",
                      "rule": "!has(self.restartPolicy)"
                    }
                  ]
                }
              }
            ],
            "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.Container"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge"
          },
          "dnsConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodDNSConfig"
              }
            ],
            "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
          },
          "dnsPolicy": {
            "default": "ClusterFirst",
            "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
            "type": "string"
          },
          "enableServiceLinks": {
            "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
            "type": "boolean"
          },
          "ephemeralContainers": {
            "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.EphemeralContainer"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge"
          },
          "hostAliases": {
            "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.HostAlias"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "ip"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "ip",
            "x-kubernetes-patch-strategy": "merge"
          },
          "hostIPC": {
            "description": "Use the host's ipc namespace. Optional: Default to false.",
            "type": "boolean"
          },
          "hostNetwork": {
            "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
            "type": "boolean"
          },
          "hostPID": {
            "description": "Use the host's pid namespace. Optional: Default to false.",
            "type": "boolean"
          },
          "hostUsers": {
            "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "!format.dns1123Label().validate(self).hasValue()"
              }
            ]
          },
          "imagePullSecrets": {
            "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge"
          },
          "initContainers": {
            "allOf": [
              {
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "resizePolicy": {
                          "x-kubernetes-validations": [
                            {
                              "message": "must not be set for init containers",
                              "rule": "false"
                            }
                          ]
                        },
                        "restartPolicy": {
                          "x-kubernetes-validations": [
                            {
                              "message": "supported values: \"Always\"",
                              "rule": "self == \"Always\""
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "x-kubernetes-validations": [
                    {
                      "fieldPath": ".lifecycle",
                      "message": "may not be set for init containers without restartPolicy=Always",
                      "reason": "FieldValueForbidden",
                      "rule": "!has(self.lifecycle) || self.?restartPolicy.orValue(\"\") == \"Always\""
                    },
                    {
                      "fieldPath": ".livenessProbe",
                      "message": "may not be set for init containers without restartPolicy=Always",
                      "reason": "FieldValueForbidden",
                      "rule": "!has(self.livenessProbe) || self.?restartPolicy.orValue(\"\") == \"Always\""
                    },
                    {
                      "fieldPath": ".readinessProbe",
                      "message": "may not be set for init containers without restartPolicy=Always",
                      "reason": "FieldValueForbidden",
                      "rule": "!has(self.readinessProbe) || self.?restartPolicy.orValue(\"\") == \"Always\""
                    },
                    {
                      "fieldPath": ".startupProbe",
                      "message": "may not be set for init containers without restartPolicy=Always",
                      "reason": "FieldValueForbidden",
                      "rule": "!has(self.startupProbe) || self.?restartPolicy.orValue(\"\") == \"Always\""
                    }
                  ]
                }
              }
            ],
            "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.Container"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge"
          },
          "nodeName": {
            "description": "NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "nodeSelector": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "allOf": [
              {
                "additionalProperties": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.labelValue().validate(self).value()",
                      "rule": "!format.labelValue().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-validations": [
              {
                "messageExpression": "self.all(k, format.qualifiedName().validate(k).value().orValue([])).filter(x, x.size() > 0)[0]",
                "rule": "self.all(k, !format.qualifiedName().validate(k).hasValue())"
              }
            ]
          },
          "os": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodOS"
              }
            ],
            "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
          },
          "overhead": {
            "additionalProperties": {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            },
            "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
            "type": "object"
          },
          "preemptionPolicy": {
            "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
            "type": "string"
          },
          "priority": {
            "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
            "format": "int32",
            "type": "integer"
          },
          "priorityClassName": {
            "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "readinessGates": {
            "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodReadinessGate"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "resourceClaims": {
            "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodResourceClaim"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge,retainKeys"
          },
          "restartPolicy": {
            "default": "Always",
            "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "Required value",
                "reason": "FieldValueRequired",
                "rule": "self.size() > 0"
              }
            ]
          },
          "runtimeClassName": {
            "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "schedulerName": {
            "default": "default-scheduler",
            "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
            "type": "string"
          },
          "schedulingGates": {
            "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSchedulingGate"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge"
          },
          "securityContext": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSecurityContext"
              }
            ],
            "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
          },
          "serviceAccount": {
            "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
            "type": "string"
          },
          "serviceAccountName": {
            "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "setHostnameAsFQDN": {
            "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
            "type": "boolean"
          },
          "shareProcessNamespace": {
            "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
            "type": "boolean"
          },
          "subdomain": {
            "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "!format.dns1123Label().validate(self).hasValue()"
              }
            ]
          },
          "terminationGracePeriodSeconds": {
            "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
            "format": "int64",
            "type": "integer"
          },
          "tolerations": {
            "description": "If specified, the pod's tolerations.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.Toleration"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "topologySpreadConstraints": {
            "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.TopologySpreadConstraint"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "topologyKey",
              "whenUnsatisfiable"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "topologyKey",
            "x-kubernetes-patch-strategy": "merge"
          },
          "volumes": {
            "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.Volume"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "name",
            "x-kubernetes-patch-strategy": "merge,retainKeys"
          }
        },
        "required": [
          "containers"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".shareProcessNamespace",
            "message": "ShareProcessNamespace and HostPID cannot both be enabled",
            "rule": "!self.?shareProcessNamespace.orValue(false) || !self.?hostPID.orValue(false)"
          },
          {
            "fieldPath": ".containers",
            "message": "`hostPort` must match `containerPort` when `hostNetwork` is true",
            "rule": "!self.?hostNetwork.orValue(false) || self.?containers.orValue([]).all(c, c.?ports.orValue([]).all(p, !has(p.hostPort) || !has(p.containerPort) || p.hostPort == p.containerPort))"
          },
          {
            "fieldPath": ".hostNetwork",
            "message": "when `pod.Spec.HostUsers` is false",
            "reason": "FieldValueForbidden",
            "rule": "has(self.hostUsers) && !self.hostUsers ? !self.hostNetwork : true"
          },
          {
            "fieldPath": ".hostPID",
            "message": "when `pod.Spec.HostUsers` is false",
            "reason": "FieldValueForbidden",
            "rule": "has(self.hostUsers) && !self.hostUsers ? !self.hostPID : true"
          },
          {
            "fieldPath": ".hostIPC",
            "message": "when `pod.Spec.HostUsers` is false",
            "reason": "FieldValueForbidden",
            "rule": "has(self.hostUsers) && !self.hostUsers ? !self.hostIPC : true"
          },
          {
            "fieldPath": ".containers",
            "message": "container lifecycle sleep seconds must be less than or equal to `terminationGracePeriodSeconds`",
            "rule": "!has(self.terminationGracePeriodSeconds) || self.containers.all(c, c.?lifecycle.?preStop.?sleep.?seconds.orValue(0) <= self.terminationGracePeriodSeconds && c.?lifecycle.?postStart.?sleep.?seconds.orValue(0) <= self.terminationGracePeriodSeconds)"
          },
          {
            "fieldPath": ".dnsConfig",
            "message": "must provide `dnsConfig` when `dnsPolicy` is None",
            "reason": "FieldValueRequired",
            "rule": "!has(self.dnsPolicy) || self.dnsPolicy != \"None\" || has(self.dnsConfig)"
          },
          {
            "fieldPath": ".dnsConfig.nameservers",
            "message": "must provide at least one DNS nameserver when `dnsPolicy` is None",
            "reason": "FieldValueRequired",
            "rule": "!has(self.dnsPolicy) || self.dnsPolicy != \"None\" || !has(self.dnsConfig) || (self.dnsConfig.?nameservers.optMap(x, x.size()).orValue(0) > 0)"
          },
          {
            "fieldPath": ".initContainers",
            "message": "init container name must not match any container name",
            "reason": "FieldValueDuplicate",
            "rule": "self.?initContainers.orValue([]).all(ic, self.?containers.orValue([]).all(c, c.name != ic.name))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "ephemeral container name must not match any container name",
            "reason": "FieldValueDuplicate",
            "rule": "self.?ephemeralContainers.orValue([]).all(ec, self.?containers.orValue([]).all(c, c.name != ec.name))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "ephemeral container name must not match any init container name",
            "reason": "FieldValueDuplicate",
            "rule": "self.?ephemeralContainers.orValue([]).all(ec, self.?initContainers.orValue([]).all(ic, ic.name != ec.name))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "ephemeral container targetContainerName must match a container name",
            "reason": "FieldValueInvalid",
            "rule": "self.?ephemeralContainers.orValue([]).all(ec, ec.?targetContainerName.orValue(\"\").size() == 0 || self.containers.exists(c, c.name == ec.targetContainerName) || self.initContainers.exists(ic, ic.name == ec.targetContainerName))"
          },
          {
            "fieldPath": ".containers",
            "message": "container volume mounts must be a volume name",
            "rule": "self.?containers.orValue([]).all(c, c.?volumeMounts.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".initContainers",
            "message": "container volume mounts must be a volume name",
            "rule": "self.?initContainers.orValue([]).all(c, c.?volumeMounts.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "container volume mounts must be a volume name",
            "rule": "self.?ephemeralContainers.orValue([]).all(c, c.?volumeMounts.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".containers",
            "message": "container volume devices must be a volume name",
            "rule": "self.?containers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".initContainers",
            "message": "initContainer volume devices must be a volume name",
            "rule": "self.?initContainers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "ephemeralContainer volume devices must be a volume name",
            "rule": "self.?ephemeralContainers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, self.?volumes.orValue([]).exists(x, x.name == vm.name)))"
          },
          {
            "fieldPath": ".containers",
            "message": "can only use volume source type of PersistentVolumeClaim or Ephemeral for block mode",
            "rule": "self.?containers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, !self.?volumes.orValue([]).exists(x, x.name == vm.name) || self.?volumes.orValue([]).exists(x, x.name == vm.name && (has(x.persistentVolumeClaim) || has(x.ephemeral)))))"
          },
          {
            "fieldPath": ".initContainers",
            "message": "can only use volume source type of PersistentVolumeClaim or Ephemeral for block mode",
            "rule": "self.?initContainers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, !self.?volumes.orValue([]).exists(x, x.name == vm.name) || self.?volumes.orValue([]).exists(x, x.name == vm.name && (has(x.persistentVolumeClaim) || has(x.ephemeral)))))"
          },
          {
            "fieldPath": ".ephemeralContainers",
            "message": "can only use volume source type of PersistentVolumeClaim or Ephemeral for block mode",
            "rule": "self.?ephemeralContainers.orValue([]).all(c, c.?volumeDevices.orValue([]).all(vm, !self.?volumes.orValue([]).exists(x, x.name == vm.name) || self.?volumes.orValue([]).exists(x, x.name == vm.name && (has(x.persistentVolumeClaim) || has(x.ephemeral)))))"
          }
        ]
      },
      "io.k8s.api.core.v1.PodTemplateSpec": {
        "description": "PodTemplateSpec describes the data a pod should have when created from a template",
        "properties": {
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
              }
            ],
            "default": {},
            "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodSpec"
              }
            ],
            "default": {},
            "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.PortworxVolumeSource": {
        "description": "PortworxVolumeSource represents a Portworx volume resource.",
        "properties": {
          "fsType": {
            "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "volumeID": {
            "default": "",
            "description": "volumeID uniquely identifies a Portworx volume",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "volumeID"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.PreferredSchedulingTerm": {
        "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
        "properties": {
          "preference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm"
              }
            ],
            "default": {},
            "description": "A node selector term, associated with the corresponding weight."
          },
          "weight": {
            "default": 0,
            "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
            "format": "int32",
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "weight",
          "preference"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Probe": {
        "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
        "properties": {
          "exec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ExecAction"
              }
            ],
            "description": "Exec specifies the action to take."
          },
          "failureThreshold": {
            "default": 3,
            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "grpc": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.GRPCAction"
              }
            ],
            "description": "GRPC specifies an action involving a GRPC port."
          },
          "httpGet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HTTPGetAction"
              }
            ],
            "description": "HTTPGet specifies the http request to perform."
          },
          "initialDelaySeconds": {
            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "periodSeconds": {
            "default": 10,
            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "successThreshold": {
            "default": 1,
            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "tcpSocket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.TCPSocketAction"
              }
            ],
            "description": "TCPSocket specifies an action involving a TCP port."
          },
          "terminationGracePeriodSeconds": {
            "default": 30,
            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "timeoutSeconds": {
            "default": 1,
            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "must specify a handler type",
            "reason": "FieldValueRequired",
            "rule": "has(self.exec) || has(self.httpGet) || has(self.tcpSocket) || has(self.grpc)"
          },
          {
            "message": "may not specify more than 1 handler type",
            "rule": "(has(self.exec)?1:0) + (has(self.httpGet)?1:0) + (has(self.tcpSocket)?1:0) + (has(self.grpc)?1:0) <= 1"
          }
        ]
      },
      "io.k8s.api.core.v1.ProjectedVolumeSource": {
        "description": "Represents a projected volume source",
        "properties": {
          "defaultMode": {
            "default": 420,
            "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "sources": {
            "description": "sources is the list of volume projections",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.VolumeProjection"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.QuobyteVolumeSource": {
        "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
        "properties": {
          "group": {
            "description": "group to map volume access to Default is no group",
            "type": "string"
          },
          "readOnly": {
            "default": false,
            "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
            "type": "boolean"
          },
          "registry": {
            "default": "",
            "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a host:port pair or multiple pairs separated by commas",
                "rule": "self.size() == 0 || self.split(',').all(e, e.contains(':'))"
              }
            ]
          },
          "tenant": {
            "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
            "maxLength": 65,
            "type": "string"
          },
          "user": {
            "description": "user to map volume access to Defaults to serivceaccount user",
            "type": "string"
          },
          "volume": {
            "default": "",
            "description": "volume is a string that references an already created Quobyte volume by name.",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "registry",
          "volume"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.RBDVolumeSource": {
        "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
            "type": "string"
          },
          "image": {
            "default": "",
            "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "minLength": 1,
            "type": "string"
          },
          "keyring": {
            "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "type": "string"
          },
          "monitors": {
            "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "items": {
              "default": "",
              "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "pool": {
            "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
          },
          "user": {
            "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
            "type": "string"
          }
        },
        "required": [
          "monitors",
          "image"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ResourceClaim": {
        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
        "properties": {
          "name": {
            "default": "",
            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.ResourceFieldSelector": {
        "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
        "properties": {
          "containerName": {
            "description": "Container name: required for volumes, optional for env vars",
            "type": "string"
          },
          "divisor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
              }
            ],
            "description": "Specifies the output format of the exposed resources, defaults to \"1\""
          },
          "resource": {
            "default": "",
            "description": "Required: resource to select",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "resource"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic",
        "x-kubernetes-validations": [
          {
            "message": "only divisor's values 1m and 1 are supported with the cpu resource",
            "rule": "self.?divisor.orValue(\"\").size() == 0 || self.divisor == \"0\" || !(self.resource == \"limits.cpu\" || self.resource == \"requests.cpu\") ||\n[\"1m\", \"1\"].exists(x, x == self.divisor)"
          },
          {
            "message": "only divisor's values 1, 1k, 1M, 1G, 1T, 1P, 1E, 1Ki, 1Mi, 1Gi, 1Ti, 1Pi, 1Ei are supported with the memory resource",
            "rule": "self.?divisor.orValue(\"\").size() == 0 || self.divisor == \"0\" || !(self.resource == \"limits.memory\" || self.resource == \"requests.memory\") ||\n[\"1\", \"1k\", \"1M\", \"1G\", \"1T\", \"1P\", \"1E\", \"1Ki\", \"1Mi\", \"1Gi\", \"1Ti\", \"1Pi\", \"1Ei\"].exists(x, x == self.divisor)"
          },
          {
            "message": "only divisor's values 1, 1k, 1M, 1G, 1T, 1P, 1E, 1Ki, 1Mi, 1Gi, 1Ti, 1Pi, 1Ei are supported with the local ephemeral storage resource",
            "rule": "self.?divisor.orValue(\"\").size() == 0 || self.divisor == \"0\" || !(self.resource == \"limits.ephemeral-storage\" || self.resource == \"requests.ephemeral-storage\") ||\n[\"1\", \"1k\", \"1M\", \"1G\", \"1T\", \"1P\", \"1E\", \"1Ki\", \"1Mi\", \"1Gi\", \"1Ti\", \"1Pi\", \"1Ei\"].exists(x, x == self.divisor)"
          },
          {
            "message": "only divisor's values 1, 1k, 1M, 1G, 1T, 1P, 1E, 1Ki, 1Mi, 1Gi, 1Ti, 1Pi, 1Ei are supported with the hugepages resource",
            "rule": "self.?divisor.orValue(\"\").size() == 0 || self.divisor == \"0\" || !(self.resource.startsWith(\"requests.hugepages-\") || self.resource.startsWith(\"limits.hugepages-\")) ||\n[\"1\", \"1k\", \"1M\", \"1G\", \"1T\", \"1P\", \"1E\", \"1Ki\", \"1Mi\", \"1Gi\", \"1Ti\", \"1Pi\", \"1Ei\"].exists(x, x == self.divisor)"
          }
        ]
      },
      "io.k8s.api.core.v1.ResourceRequirements": {
        "description": "ResourceRequirements describes the compute resource requirements.",
        "properties": {
          "claims": {
            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceClaim"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "name"
            ],
            "x-kubernetes-list-type": "map"
          },
          "limits": {
            "additionalProperties": {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            },
            "allOf": [
              {
                "additionalProperties": {
                  "x-kubernetes-validations": [
                    {
                      "message": "must be greater than or equal to 0",
                      "rule": "isQuantity(self) && quantity(self).asApproximateFloat() >= 0"
                    }
                  ]
                }
              }
            ],
            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "type": "object"
          },
          "requests": {
            "additionalProperties": {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            },
            "allOf": [
              {
                "additionalProperties": {
                  "x-kubernetes-validations": [
                    {
                      "message": "must be greater than or equal to 0",
                      "rule": "isQuantity(self) && quantity(self).asApproximateFloat() >= 0"
                    }
                  ]
                }
              }
            ],
            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "limits and requests keys must be a standard resource type or fully qualified",
            "rule": "[self.?limits.orValue({}).map(k, k), self.?requests.orValue({}).map(k, k)].all(ks, ks.all(k,\n\t!format.qualifiedName().validate(k).hasValue()\n))"
          },
          {
            "message": "limits and requests keys must be a standard resource for containers",
            "rule": "[self.?limits.orValue({}).map(k, k), self.?requests.orValue({}).map(k, k)].all(ks, ks.all(k,\n\t\tk.split('/').size() != 1 || ([\"cpu\",\"memory\",\"ephemeral-storage\"].exists(std, std == k) || k.startsWith(\"hugepages-\"))\n))"
          },
          {
            "message": "limits and requests must follow extended resource name standard if not standard container name",
            "rule": "[self.?limits.orValue({}).map(k, k), self.?requests.orValue({}).map(k, k)].all(ks, ks.all(k,\n\t\tk.split('/').size() == 1 || !k.contains(\"/\") || k.startsWith(\"kubernetes.io/\") ||\n\t\t!k.startsWith(\"requests.\") && !format.qualifiedName().validate(\"requests.\" + k).hasValue()\n\t))"
          },
          {
            "message": "HugePages require cpu or memory",
            "reason": "FieldValueForbidden",
            "rule": "self.?limits.orValue({}).exists(k, k == \"cpu\" || k == \"memory\") || self.?requests.orValue({}).exists(k, k == \"cpu\" || k == \"memory\") || !(\n\t\tself.?limits.orValue({}).exists(k, k.startsWith(\"hugepages-\")) ||\n\t\tself.?requests.orValue({}).exists(k, k.startsWith(\"hugepages-.\"))\n)"
          }
        ]
      },
      "io.k8s.api.core.v1.SELinuxOptions": {
        "description": "SELinuxOptions are the labels to be applied to the container",
        "properties": {
          "level": {
            "description": "Level is SELinux level label that applies to the container.",
            "type": "string"
          },
          "role": {
            "description": "Role is a SELinux role label that applies to the container.",
            "type": "string"
          },
          "type": {
            "description": "Type is a SELinux type label that applies to the container.",
            "type": "string"
          },
          "user": {
            "description": "User is a SELinux user label that applies to the container.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.ScaleIOVolumeSource": {
        "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
        "properties": {
          "fsType": {
            "default": "xfs",
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
            "type": "string"
          },
          "gateway": {
            "default": "",
            "description": "gateway is the host address of the ScaleIO API Gateway.",
            "minLength": 1,
            "type": "string"
          },
          "protectionDomain": {
            "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
          },
          "sslEnabled": {
            "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
            "type": "boolean"
          },
          "storageMode": {
            "default": "ThinProvisioned",
            "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
            "type": "string"
          },
          "storagePool": {
            "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
            "type": "string"
          },
          "system": {
            "default": "",
            "description": "system is the name of the storage system as configured in ScaleIO.",
            "minLength": 1,
            "type": "string"
          },
          "volumeName": {
            "default": "",
            "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "gateway",
          "system",
          "volumeName"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.SeccompProfile": {
        "properties": {
          "localhostProfile": {
            "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              },
              {
                "message": "must not contain '..'",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              }
            ]
          },
          "type": {
            "default": "",
            "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.SecretEnvSource": {
        "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
        "properties": {
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "Specify whether the Secret must be defined",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".name",
            "message": "Required value",
            "reason": "FieldValueRequired",
            "rule": "has(self.name) && self.name.size() > 0"
          },
          {
            "fieldPath": ".name",
            "messageExpression": "format.dns1123Subdomain().validate(self.name).value()",
            "rule": "!has(self.name) || !format.dns1123Subdomain().validate(self.name).hasValue()"
          }
        ]
      },
      "io.k8s.api.core.v1.SecretKeySelector": {
        "allOf": [
          {
            "properties": {
              "name": {
                "x-kubernetes-validations": [
                  {
                    "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                    "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
                  }
                ]
              }
            }
          }
        ],
        "description": "SecretKeySelector selects a key of a Secret.",
        "properties": {
          "key": {
            "default": "",
            "description": "The key of the secret to select from.  Must be a valid secret key.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "^[-._a-zA-Z0-9]+$",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "may not start with '..'",
                "rule": "self == \"..\" || !self.startsWith(\"..\")"
              },
              {
                "message": "must not be '.'",
                "rule": "self != \".\""
              },
              {
                "message": "must not be '..'",
                "rule": "self != \"..\""
              }
            ]
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "Specify whether the Secret or its key must be defined",
            "type": "boolean"
          }
        },
        "required": [
          "key"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.SecretProjection": {
        "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
        "properties": {
          "items": {
            "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "name": {
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "type": "string"
          },
          "optional": {
            "description": "optional field specify whether the Secret or its key must be defined",
            "type": "boolean"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".name",
            "message": "Required value",
            "reason": "FieldValueRequired",
            "rule": "self.?name.orValue(\"\").size() > 0"
          }
        ]
      },
      "io.k8s.api.core.v1.SecretVolumeSource": {
        "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
        "properties": {
          "defaultMode": {
            "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "format": "int32",
            "maximum": 511,
            "minimum": 0,
            "type": "integer"
          },
          "items": {
            "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.api.core.v1.KeyToPath"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "optional": {
            "description": "optional field specify whether the Secret or its keys must be defined",
            "type": "boolean"
          },
          "secretName": {
            "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "secretName"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.SecurityContext": {
        "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
        "properties": {
          "allowPrivilegeEscalation": {
            "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
            "type": "boolean"
          },
          "appArmorProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AppArmorProfile"
              }
            ],
            "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile overrides the pod's appArmorProfile. Note that this field cannot be set when spec.os.name is windows."
          },
          "capabilities": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Capabilities"
              }
            ],
            "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
          },
          "privileged": {
            "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
            "type": "boolean"
          },
          "procMount": {
            "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
            "type": "string"
          },
          "readOnlyRootFilesystem": {
            "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
            "type": "boolean"
          },
          "runAsGroup": {
            "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "runAsNonRoot": {
            "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
            "type": "boolean"
          },
          "runAsUser": {
            "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
            "format": "int64",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "seLinuxOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SELinuxOptions"
              }
            ],
            "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
          },
          "seccompProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SeccompProfile"
              }
            ],
            "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
          },
          "windowsOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions"
              }
            ],
            "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "cannot set `allowPrivilegeEscalation` to false and `privileged` to true",
            "rule": "has(self.allowPrivilegeEscalation) && !self.allowPrivilegeEscalation ? !self.?privileged.orValue(false) : true"
          },
          {
            "message": "cannot set `allowPrivilegeEscalation` to false and `capabilities.Add` CAP_SYS_ADMIN",
            "rule": "has(self.allowPrivilegeEscalation) && !self.allowPrivilegeEscalation ? !self.capabilities.add.exists(c, c == \"SYS_CAP_ADMIN\") : true"
          }
        ]
      },
      "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
        "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
        "properties": {
          "audience": {
            "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
            "type": "string"
          },
          "expirationSeconds": {
            "default": 3600,
            "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
            "format": "int64",
            "maximum": 86400,
            "minimum": 600,
            "type": "integer"
          },
          "path": {
            "default": "",
            "description": "path is the path relative to the mount point of the file to project the token into.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not start with \"..\"",
                "rule": "self.startsWith(\"../\") || !self.startsWith(\"..\")"
              },
              {
                "message": "must not contain \"..\"",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              },
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              }
            ]
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.SleepAction": {
        "description": "SleepAction describes a \"sleep\" action.",
        "properties": {
          "seconds": {
            "default": 0,
            "description": "Seconds is the number of seconds to sleep.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "seconds"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.StorageOSVolumeSource": {
        "description": "Represents a StorageOS persistent volume resource.",
        "properties": {
          "fsType": {
            "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "readOnly": {
            "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
            "type": "boolean"
          },
          "secretRef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LocalObjectReference"
              }
            ],
            "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
            "x-kubernetes-validations": [
              {
                "fieldPath": ".name",
                "message": "Required value",
                "reason": "FieldValueRequired",
                "rule": "has(self.name) && self.name.size() > 0"
              }
            ]
          },
          "volumeName": {
            "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "!format.dns1123Label().validate(self).hasVlaue()"
              }
            ]
          },
          "volumeNamespace": {
            "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "!format.dns1123Label().validate(self).hasVlaue()"
              }
            ]
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.Sysctl": {
        "description": "Sysctl defines a kernel parameter to be set",
        "properties": {
          "name": {
            "default": "",
            "description": "Name of a property to set",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "^([a-z0-9]([-_a-z0-9]*[a-z0-9])?[\\./])*[a-z0-9]([-_a-z0-9]*[a-z0-9])?$",
            "type": "string"
          },
          "value": {
            "default": "",
            "description": "Value of a property to set",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.TCPSocketAction": {
        "description": "TCPSocketAction describes an action based on opening a socket",
        "properties": {
          "host": {
            "description": "Optional: Host name to connect to, defaults to the pod IP.",
            "type": "string"
          },
          "port": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
              }
            ],
            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
            "maximum": 65535,
            "minimum": 1,
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.portName().validate(self).value()",
                "rule": "type(self) != string || !format.portName().validate(self).hasValue()"
              }
            ]
          }
        },
        "required": [
          "port"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Toleration": {
        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
        "properties": {
          "effect": {
            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
            "type": "string"
          },
          "key": {
            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          },
          "operator": {
            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
            "type": "string"
          },
          "tolerationSeconds": {
            "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".operator",
            "message": "operator must be Exists when `key` is empty, which means \"match all values and all keys\"",
            "rule": "(self.?key.orValue(\"\").size() > 0) || self.?operator.orValue(\"\") == 'Exists'"
          },
          {
            "fieldPath": ".effect",
            "message": "must be 'NoExecute' when `tolerationSeconds` is set",
            "rule": "!has(self.tolerationSeconds) || self.effect == 'NoExecute'"
          },
          {
            "fieldPath": ".operator",
            "messageExpression": "format.labelValue().validate(self.value).value()",
            "rule": "(has(self.operator) && self.operator != 'Equal' && self.operator != \"\") || !format.labelValue().validate(self.?value.orValue(\"\")).hasValue()"
          },
          {
            "fieldPath": ".operator",
            "message": "value must be empty when `operator` is 'Exists'",
            "rule": "!has(self.operator) || self.operator != 'Exists' || self.?value.orValue(\"\").size() == 0"
          }
        ]
      },
      "io.k8s.api.core.v1.TopologySpreadConstraint": {
        "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
        "properties": {
          "labelSelector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
              }
            ],
            "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
          },
          "matchLabelKeys": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.dns1123Label().validate(self).value()",
                      "rule": "!format.dns1123Label().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "maxSkew": {
            "default": 0,
            "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "minDomains": {
            "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "nodeAffinityPolicy": {
            "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
            "type": "string"
          },
          "nodeTaintsPolicy": {
            "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
            "type": "string"
          },
          "topologyKey": {
            "default": "",
            "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
            "minLength": 1,
            "type": "string"
          },
          "whenUnsatisfiable": {
            "default": "",
            "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
            "type": "string"
          }
        },
        "required": [
          "maxSkew",
          "topologyKey",
          "whenUnsatisfiable"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "\"minDomains must be nil when whenUnsatisfiable is not DoNotSchedule\"",
            "rule": "self.?whenUnsatisfiable.orValue(\"\") == \"DoNotSchedule\" ? !has(self.minDomains) : true"
          }
        ]
      },
      "io.k8s.api.core.v1.TypedLocalObjectReference": {
        "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
        "properties": {
          "apiGroup": {
            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
            "type": "string"
          },
          "kind": {
            "default": "",
            "description": "Kind is the type of resource being referenced",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "Name is the name of resource being referenced",
            "type": "string"
          }
        },
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.api.core.v1.TypedObjectReference": {
        "properties": {
          "apiGroup": {
            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
            "type": "string"
          },
          "kind": {
            "default": "",
            "description": "Kind is the type of resource being referenced",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "Name is the name of resource being referenced",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
            "type": "string"
          }
        },
        "required": [
          "kind",
          "name"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.Volume": {
        "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod. ?k8s:validation:cel[1]:rule>self.size() > has(self.name) ? 1 : 0 ?k8s:validation:cel[1]:message>must specify at least one volume type ?k8s:validation:cel[2]:rule>self.size() == has(self.name) ? 2 : 1 ?k8s:validation:cel[2]:message>may not specify more than one volume type",
        "properties": {
          "awsElasticBlockStore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
              }
            ],
            "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
          },
          "azureDisk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource"
              }
            ],
            "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
          },
          "azureFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.AzureFileVolumeSource"
              }
            ],
            "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
          },
          "cephfs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.CephFSVolumeSource"
              }
            ],
            "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
          },
          "cinder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.CinderVolumeSource"
              }
            ],
            "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
          },
          "configMap": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapVolumeSource"
              }
            ],
            "description": "configMap represents a configMap that should populate this volume"
          },
          "csi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.CSIVolumeSource"
              }
            ],
            "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
          },
          "downwardAPI": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeSource"
              }
            ],
            "description": "downwardAPI represents downward API about the pod that should populate this volume"
          },
          "emptyDir": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EmptyDirVolumeSource"
              }
            ],
            "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
          },
          "ephemeral": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EphemeralVolumeSource"
              }
            ],
            "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
          },
          "fc": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.FCVolumeSource"
              }
            ],
            "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
          },
          "flexVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.FlexVolumeSource"
              }
            ],
            "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
          },
          "flocker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource"
              }
            ],
            "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
          },
          "gcePersistentDisk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
              }
            ],
            "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
          },
          "gitRepo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.GitRepoVolumeSource"
              }
            ],
            "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
          },
          "glusterfs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.GlusterfsVolumeSource"
              }
            ],
            "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
          },
          "hostPath": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource"
              }
            ],
            "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
          },
          "iscsi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ISCSIVolumeSource"
              }
            ],
            "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
          },
          "name": {
            "default": "",
            "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Label().validate(self).value()",
                "rule": "self.size() == 0 || !format.dns1123Label().validate(self).hasValue()"
              }
            ]
          },
          "nfs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NFSVolumeSource"
              }
            ],
            "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
          },
          "persistentVolumeClaim": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
              }
            ],
            "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
          },
          "photonPersistentDisk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
              }
            ],
            "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
          },
          "portworxVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource"
              }
            ],
            "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
          },
          "projected": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ProjectedVolumeSource"
              }
            ],
            "description": "projected items for all in one resources secrets, configmaps, and downward API"
          },
          "quobyte": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource"
              }
            ],
            "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
          },
          "rbd": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.RBDVolumeSource"
              }
            ],
            "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
          },
          "scaleIO": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ScaleIOVolumeSource"
              }
            ],
            "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
          },
          "secret": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretVolumeSource"
              }
            ],
            "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
          },
          "storageos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.StorageOSVolumeSource"
              }
            ],
            "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
          },
          "vsphereVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
              }
            ],
            "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "Total length of <volume name>:<iscsi.targetPortal> must be under 64 characters if iscsi.initiatorName is specified.",
            "rule": "!has(self.iscsi) || !has(self.iscsi.initiatorName) || self.?name.orValue(\"\").size() + 1 + self.iscsi.targetPortal.size() <= 64"
          }
        ]
      },
      "io.k8s.api.core.v1.VolumeDevice": {
        "description": "volumeDevice describes a mapping of a raw block device within a container.",
        "properties": {
          "devicePath": {
            "default": "",
            "description": "devicePath is the path inside of the container that the device will be mapped to.",
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not contain '..'",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              }
            ]
          },
          "name": {
            "default": "",
            "description": "name must match the name of a persistentVolumeClaim in the pod",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name",
          "devicePath"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.VolumeMount": {
        "description": "VolumeMount describes a mounting of a Volume within a container.",
        "properties": {
          "mountPath": {
            "default": "",
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
            "minLength": 1,
            "type": "string"
          },
          "mountPropagation": {
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "This must match the Name of a Volume.",
            "minLength": 1,
            "type": "string"
          },
          "readOnly": {
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
            "type": "boolean"
          },
          "recursiveReadOnly": {
            "description": "RecursiveReadOnly specifies whether read-only mounts should be handled recursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.",
            "type": "string"
          },
          "subPath": {
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              },
              {
                "message": "must not contain '..'",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              }
            ]
          },
          "subPathExpr": {
            "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must be a relative path",
                "rule": "self.size() == 0 || !self.startsWith(\"/\")"
              },
              {
                "message": "must not contain '..'",
                "rule": "!self.split(\"/\").exists(x, x == \"..\")"
              }
            ]
          }
        },
        "required": [
          "name",
          "mountPath"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".subPathExpr",
            "message": "subPathExpr and subPath are mutually exclusive",
            "rule": "!has(self.subPath) || !has(self.subPathExpr)"
          },
          {
            "fieldPath": ".recursiveReadOnly",
            "message": "may only be specified when readOnly is true",
            "reason": "FieldValueForbidden",
            "rule": "![\"Enabled\", \"IfPossible\"].exists(v, v == self.?recursiveReadOnly.orValue(\"Disabled\")) || self.?readOnly.orValue(false)"
          },
          {
            "fieldPath": ".recursiveReadOnly",
            "message": "may only be specified when mountPropagation is None or not specified",
            "reason": "FieldValueForbidden",
            "rule": "![\"Enabled\", \"IfPossible\"].exists(v, v == self.?recursiveReadOnly.orValue(\"Disabled\")) || self.?mountPropagation.orValue(\"None\") == \"None\""
          }
        ]
      },
      "io.k8s.api.core.v1.VolumeProjection": {
        "description": "Projection that may be projected along with other supported volume types",
        "properties": {
          "clusterTrustBundle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ClusterTrustBundleProjection"
              }
            ],
            "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time."
          },
          "configMap": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapProjection"
              }
            ],
            "description": "configMap information about the configMap data to project"
          },
          "downwardAPI": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.DownwardAPIProjection"
              }
            ],
            "description": "downwardAPI information about the downwardAPI data to project"
          },
          "secret": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretProjection"
              }
            ],
            "description": "secret information about the secret data to project"
          },
          "serviceAccountToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountTokenProjection"
              }
            ],
            "description": "serviceAccountToken is information about the serviceAccountToken data to project"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "may not specify more than 1 volume type",
            "reason": "FieldValueForbidden",
            "rule": "[has(self.secret), has(self.downwardAPI), has(self.configMap), has(self.serviceAccountToken), has(self.clusterTrustBundle)].filter(x, x).size() <= 1"
          }
        ]
      },
      "io.k8s.api.core.v1.VolumeResourceRequirements": {
        "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.",
        "properties": {
          "limits": {
            "additionalProperties": {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            },
            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "type": "object"
          },
          "requests": {
            "additionalProperties": {
              "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity"
            },
            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
            "type": "object"
          }
        },
        "type": "object"
      },
      "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
        "description": "Represents a vSphere volume resource.",
        "properties": {
          "fsType": {
            "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
            "type": "string"
          },
          "storagePolicyID": {
            "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
            "type": "string"
          },
          "storagePolicyName": {
            "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
            "type": "string"
          },
          "volumePath": {
            "default": "",
            "description": "volumePath is the path that identifies vSphere volume vmdk",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "volumePath"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
        "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
        "properties": {
          "podAffinityTerm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm"
              }
            ],
            "default": {},
            "description": "Required. A pod affinity term, associated with the corresponding weight."
          },
          "weight": {
            "default": 0,
            "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
            "format": "int32",
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "weight",
          "podAffinityTerm"
        ],
        "type": "object"
      },
      "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
        "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
        "properties": {
          "gmsaCredentialSpec": {
            "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string"
          },
          "gmsaCredentialSpecName": {
            "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.dns1123Subdomain().validate(self).value()",
                "rule": "!format.dns1123Subdomain().validate(self).hasValue()"
              }
            ]
          },
          "hostProcess": {
            "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
            "type": "boolean"
          },
          "runAsUserName": {
            "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "x-kubernetes-validations": [
              {
                "message": "must not contain control characters",
                "rule": "!self.matches(\"[[:cntrl:]]+\")"
              },
              {
                "message": "runAsUserName cannot contain more than one backslash",
                "rule": "self.indexOf(\"\\\\\") == self.lastIndexOf(\"\\\\\")"
              },
              {
                "message": "domain part of runAsUserName must be under 256 characters",
                "rule": "!self.contains(\"\\\\\") || self.size() - self.indexOf(\"\\\\\") - 1 <= 256"
              },
              {
                "message": "runAsUserName's Domain doesn't match the NetBios nor the DNS format",
                "rule": "!self.contains(\"\\\\\") || self.substring(0, self.indexOf(\"\\\\\")).matches('^([^\\\\/:\\*\\?\"<>|\\.][^\\\\/:\\*\\?\"<>|]{0,14})|([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$')"
              },
              {
                "message": "runAsUserName's User length must not be longer than 104 characters",
                "rule": "[self.indexOf(\"\\\\\"), self.size()].max() <= 104"
              },
              {
                "message": "runAsUserName's User cannot be empty",
                "rule": "self.indexOf(\"\\\\\") != 0"
              },
              {
                "message": "runAsUserName's User cannot contain only periods or spaces",
                "rule": "!self.matches('^[\\. ]+(\\\\\\\\.*)?$')"
              },
              {
                "message": "runAsUserName's User cannot contain the following characters: \"/\\:;|=,+*?<>@[]",
                "rule": "self.matches('^[^\"/\\\\:;|=,\\+\\*\\?<>@\\[\\]]*(\\\\\\\\.*)?$')"
              }
            ]
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.api.resource.Quantity": {
        "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
        "description": "APIResource specifies the name of a resource and whether it is namespaced.",
        "properties": {
          "categories": {
            "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "group": {
            "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
            "type": "string"
          },
          "kind": {
            "default": "",
            "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "name is the plural name of the resource.",
            "type": "string"
          },
          "namespaced": {
            "default": false,
            "description": "namespaced indicates if a resource is namespaced or not.",
            "type": "boolean"
          },
          "shortNames": {
            "description": "shortNames is a list of suggested short names of the resource.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "singularName": {
            "default": "",
            "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
            "type": "string"
          },
          "storageVersionHash": {
            "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
            "type": "string"
          },
          "verbs": {
            "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
            "type": "string"
          }
        },
        "required": [
          "name",
          "singularName",
          "namespaced",
          "kind",
          "verbs"
        ],
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
        "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "groupVersion": {
            "default": "",
            "description": "groupVersion is the group and version this APIResourceList is for.",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "resources": {
            "description": "resources contains the name of the resources and if they are namespaced.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "groupVersion",
          "resources"
        ],
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "APIResourceList",
            "version": "v1"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
        "description": "DeleteOptions may be provided when deleting an API object.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "dryRun": {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "gracePeriodSeconds": {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "format": "int64",
            "type": "integer"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "orphanDependents": {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "type": "boolean"
          },
          "preconditions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
              }
            ],
            "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
          },
          "propagationPolicy": {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1beta2"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2beta1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2beta2"
          },
          {
            "group": "batch",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "batch",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "events.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "events.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "extensions",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta2"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta3"
          },
          {
            "group": "imagepolicy.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "internal.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "policy",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "policy",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "resource.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha2"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "storagemigration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
        "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "matchLabels": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "allOf": [
              {
                "additionalProperties": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.labelValue().validate(self).value()",
                      "rule": "!format.labelValue().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
        "properties": {
          "key": {
            "default": "",
            "description": "key is the label key that the selector applies to.",
            "type": "string",
            "x-kubernetes-validations": [
              {
                "messageExpression": "format.qualifiedName().validate(self).value()",
                "rule": "!format.qualifiedName().validate(self).hasValue()"
              }
            ]
          },
          "operator": {
            "default": "",
            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
            "type": "string"
          },
          "values": {
            "allOf": [
              {
                "items": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.labelValue().validate(self).value()",
                      "rule": "!format.labelValue().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "key",
          "operator"
        ],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "fieldPath": ".values",
            "message": "must be specified when `operator` is 'In' or 'NotIn'",
            "reason": "FieldValueRequired",
            "rule": "self.operator == \"In\" || self.operator == \"NotIn\" ? has(self.values) && self.values.size() > 0 : true"
          },
          {
            "fieldPath": ".values",
            "message": "may not be specified when `operator` is 'Exists' or 'DoesNotExist'",
            "reason": "FieldValueForbidden",
            "rule": "self.operator == \"Exists\" || self.operator == \"DoesNotExist\" ? !has(self.values) || self.values.size() == 0 : true"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
        "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
        "properties": {
          "continue": {
            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
            "type": "string"
          },
          "remainingItemCount": {
            "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
            "format": "int64",
            "type": "integer"
          },
          "resourceVersion": {
            "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "selfLink": {
            "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
        "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
            "type": "string"
          },
          "fieldsType": {
            "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
            "type": "string"
          },
          "fieldsV1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
              }
            ],
            "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
          },
          "manager": {
            "description": "Manager is an identifier of the workflow managing these fields.",
            "type": "string"
          },
          "operation": {
            "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
            "type": "string"
          },
          "subresource": {
            "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
            "type": "string"
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
        "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "annotation keys must be qualified names",
                "rule": "self.all(k, !format.qualifiedName().validate(k.lowerAscii()).hasValue())"
              }
            ]
          },
          "creationTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "deletionGracePeriodSeconds": {
            "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
            "format": "int64",
            "type": "integer"
          },
          "deletionTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              }
            ],
            "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "finalizers": {
            "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set",
            "x-kubernetes-patch-strategy": "merge"
          },
          "generateName": {
            "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
            "type": "string"
          },
          "generation": {
            "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
            "format": "int64",
            "type": "integer"
          },
          "labels": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "allOf": [
              {
                "additionalProperties": {
                  "x-kubernetes-validations": [
                    {
                      "messageExpression": "format.labelValue().validate(self).value()",
                      "rule": "!format.labelValue().validate(self).hasValue()"
                    }
                  ]
                }
              }
            ],
            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "label keys must be qualified names",
                "rule": "self.all(k, !format.qualifiedName().validate(k).hasValue())"
              }
            ]
          },
          "managedFields": {
            "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "name": {
            "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
            "type": "string"
          },
          "ownerReferences": {
            "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "uid"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "uid",
            "x-kubernetes-patch-strategy": "merge"
          },
          "resourceVersion": {
            "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "selfLink": {
            "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
            "type": "string"
          },
          "uid": {
            "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
        "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
        "properties": {
          "apiVersion": {
            "default": "",
            "description": "API version of the referent.",
            "type": "string"
          },
          "blockOwnerDeletion": {
            "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
            "type": "boolean"
          },
          "controller": {
            "description": "If true, this reference points to the managing controller.",
            "type": "boolean"
          },
          "kind": {
            "default": "",
            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
            "type": "string"
          },
          "uid": {
            "default": "",
            "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "name",
          "uid"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
        "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
        "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
        "properties": {
          "resourceVersion": {
            "description": "Specifies the target ResourceVersion",
            "type": "string"
          },
          "uid": {
            "description": "Specifies the target UID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
        "description": "Status is a return value for calls that don't return other objects.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "code": {
            "description": "Suggested HTTP return code for this status, 0 if not set.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
              }
            ],
            "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
            "x-kubernetes-list-type": "atomic"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "message": {
            "description": "A human-readable description of the status of this operation.",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
              }
            ],
            "default": {},
            "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          },
          "reason": {
            "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
            "type": "string"
          },
          "status": {
            "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "Status",
            "version": "v1"
          },
          {
            "group": "resource.k8s.io",
            "kind": "Status",
            "version": "v1alpha2"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
        "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
        "properties": {
          "field": {
            "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
            "type": "string"
          },
          "message": {
            "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
            "type": "string"
          },
          "reason": {
            "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
        "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
        "properties": {
          "causes": {
            "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "group": {
            "description": "The group attribute of the resource associated with the status StatusReason.",
            "type": "string"
          },
          "kind": {
            "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "name": {
            "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
            "type": "string"
          },
          "retryAfterSeconds": {
            "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
            "format": "int32",
            "type": "integer"
          },
          "uid": {
            "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
        "format": "date-time",
        "type": "string"
      },
      "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
        "description": "Event represents a single event to a watched resource.",
        "properties": {
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension"
              }
            ],
            "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context."
          },
          "type": {
            "default": "",
            "type": "string"
          }
        },
        "required": [
          "type",
          "object"
        ],
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1beta2"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2beta1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2beta2"
          },
          {
            "group": "batch",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "batch",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "events.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "events.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "extensions",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta2"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta3"
          },
          {
            "group": "imagepolicy.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "internal.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "policy",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "policy",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "resource.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha2"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "storagemigration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          }
        ]
      },
      "io.k8s.apimachinery.pkg.runtime.RawExtension": {
        "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
        "type": "object"
      },
      "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
        "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
        "format": "int-or-string",
        "oneOf": [
          {
            "type": "integer"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "securitySchemes": {
      "BearerToken": {
        "description": "Bearer Token authentication",
        "in": "header",
        "name": "authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "Kubernetes",
    "version": "unversioned"
  },
  "openapi": "3.0.0",
  "paths": {
    "/apis/batch/v1/": {
      "get": {
        "description": "get available resources",
        "operationId": "getBatchV1APIResources",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ]
      }
    },
    "/apis/batch/v1/cronjobs": {
      "get": {
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1CronJobForAllNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/jobs": {
      "get": {
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1JobForAllNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/namespaces/{namespace}/cronjobs": {
      "delete": {
        "description": "delete collection of CronJob",
        "operationId": "deleteBatchV1CollectionNamespacedCronJob",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
            "in": "query",
            "name": "sendInitialEvents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "get": {
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1NamespacedCronJob",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
            "in": "query",
            "name": "sendInitialEvents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJobList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "post": {
        "description": "create a CronJob",
        "operationId": "createBatchV1NamespacedCronJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Created"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}": {
      "delete": {
        "description": "delete a CronJob",
        "operationId": "deleteBatchV1NamespacedCronJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "OK"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified CronJob",
        "operationId": "readBatchV1NamespacedCronJob",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the CronJob",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "patch": {
        "description": "partially update the specified CronJob",
        "operationId": "patchBatchV1NamespacedCronJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/apply-patch+yaml": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/strategic-merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified CronJob",
        "operationId": "replaceBatchV1NamespacedCronJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status": {
      "get": {
        "description": "read status of the specified CronJob",
        "operationId": "readBatchV1NamespacedCronJobStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the CronJob",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "patch": {
        "description": "partially update status of the specified CronJob",
        "operationId": "patchBatchV1NamespacedCronJobStatus",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/apply-patch+yaml": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/strategic-merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified CronJob",
        "operationId": "replaceBatchV1NamespacedCronJobStatus",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.CronJob"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs": {
      "delete": {
        "description": "delete collection of Job",
        "operationId": "deleteBatchV1CollectionNamespacedJob",
        "parameters": [
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
            "in": "query",
            "name": "sendInitialEvents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1NamespacedJob",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
            "in": "query",
            "name": "sendInitialEvents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.JobList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "post": {
        "description": "create a Job",
        "operationId": "createBatchV1NamespacedJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Created"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {
      "delete": {
        "description": "delete a Job",
        "operationId": "deleteBatchV1NamespacedJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "schema": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "OK"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Job",
        "operationId": "readBatchV1NamespacedJob",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Job",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "patch": {
        "description": "partially update the specified Job",
        "operationId": "patchBatchV1NamespacedJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/apply-patch+yaml": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/strategic-merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Job",
        "operationId": "replaceBatchV1NamespacedJob",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status": {
      "get": {
        "description": "read status of the specified Job",
        "operationId": "readBatchV1NamespacedJobStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Job",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        }
      ],
      "patch": {
        "description": "partially update status of the specified Job",
        "operationId": "patchBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/apply-patch+yaml": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            },
            "application/strategic-merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace status of the specified Job",
        "operationId": "replaceBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
            "in": "query",
            "name": "fieldValidation",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.api.batch.v1.Job"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/watch/cronjobs": {
      "get": {
        "description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchBatchV1CronJobListForAllNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/watch/jobs": {
      "get": {
        "description": "watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchBatchV1JobListForAllNamespaces",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/watch/namespaces/{namespace}/cronjobs": {
      "get": {
        "description": "watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchBatchV1NamespacedCronJobList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}": {
      "get": {
        "description": "watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchBatchV1NamespacedCronJob",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "name of the CronJob",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/watch/namespaces/{namespace}/jobs": {
      "get": {
        "description": "watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.",
        "operationId": "watchBatchV1NamespacedJobList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watchlist",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    },
    "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "description": "watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.",
        "operationId": "watchBatchV1NamespacedJob",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/json;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/vnd.kubernetes.protobuf;stream=watch": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "watch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "name of the Job",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).",
          "in": "query",
          "name": "pretty",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "schema": {
            "type": "string",
            "uniqueItems": true
          }
        },
        {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "in": "query",
          "name": "sendInitialEvents",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "schema": {
            "type": "integer",
            "uniqueItems": true
          }
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "schema": {
            "type": "boolean",
            "uniqueItems": true
          }
        }
      ]
    }
  }
}
